import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackContext
from config import Config
from database import db
from vision_api import VisionAPI
from kbju_calculator import KBJUCalculator
from user_manager import UserManager
from drink_manager import DrinkManager
from keyboards import *
import io
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class FithubBot:
    def __init__(self):
        self.db = db
        self.vision = VisionAPI()
        self.calculator = KBJUCalculator()
        self.user_manager = UserManager()
        self.drink_manager = DrinkManager()

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        user_data = {
            'id': user.id,
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name
        }

        await update.message.reply_html(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FITHUB!\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
            reply_markup=get_user_type_keyboard()
        )

        self.user_manager.set_user_state(user.id, 'awaiting_user_type')

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        message_text = update.message.text
        state = self.user_manager.get_user_state(user_id)

        logger.info(f"User {user_id} state: {state}, message: {message_text}")

        if state == 'awaiting_user_type':
            await self.handle_user_type(update, context)
        elif state == 'awaiting_height':
            await self.handle_height(update, context)
        elif state == 'awaiting_weight':
            await self.handle_weight(update, context)
        elif state == 'awaiting_reference_object':
            await self.handle_reference_object(update, context)
        elif state == 'awaiting_trainer_id':
            await self.handle_trainer_id(update, context)
        elif state == 'awaiting_confirmation':
            await self.handle_confirmation(update, context)
        elif state == 'awaiting_food_name':
            await self.handle_food_name(update, context)
        elif state == 'awaiting_manual_weight':
            await self.handle_manual_weight(update, context)
        elif state == 'awaiting_meal_type':
            await self.handle_meal_type(update, context)
        # –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞–ø–∏—Ç–∫–æ–≤
        elif state == 'awaiting_drink_method':
            await self.handle_drink_method(update, context)
        elif state == 'awaiting_drink_category':
            await self.handle_drink_category(update, context)
        elif state == 'awaiting_drink_selection':
            await self.handle_drink_selection(update, context)
        elif state == 'awaiting_drink_name':
            await self.handle_drink_name(update, context)
        elif state == 'awaiting_drink_volume':
            await self.handle_drink_volume(update, context)
        elif state == 'awaiting_drink_custom_volume':
            await self.handle_drink_custom_volume(update, context)
        elif state == 'awaiting_drink_confirmation':
            await self.handle_drink_confirmation(update, context)
        elif state == 'awaiting_barcode_photo':
            await self.handle_barcode_photo(update, context)
        else:
            await update.message.reply_text(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã.",
                reply_markup=remove_keyboard()
            )

    async def handle_user_type(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        message_text = update.message.text

        if '—Ç—Ä–µ–Ω–µ—Ä' in message_text.lower():
            user_type = 'trainer'
            self.db.add_user({
                'id': user_id,
                'username': update.effective_user.username,
                'first_name': update.effective_user.first_name,
                'last_name': update.effective_user.last_name,
                'user_type': user_type
            })

            await update.message.reply_text(
                "–û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ç—Ä–µ–Ω–µ—Ä. \n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å —É—á–µ–Ω–∏–∫–æ–≤\n"
                "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Ö —Ä–∞—Ü–∏–æ–Ω\n"
                "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ –ø–∏—Ç–∞–Ω–∏–∏\n\n"
                "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º —Å–≤–æ–π ID.",
                reply_markup=remove_keyboard()
            )

        elif '—É—á–µ–Ω–∏–∫' in message_text.lower():
            user_type = 'trainee'
            self.db.add_user({
                'id': user_id,
                'username': update.effective_user.username,
                'first_name': update.effective_user.first_name,
                'last_name': update.effective_user.last_name,
                'user_type': user_type
            })

            await update.message.reply_text(
                "–û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–µ–Ω–∏–∫.\n\n"
                "–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–∞—à–µ–π –Ω–æ—Ä–º—ã –ö–ë–ñ–£ –º–Ω–µ –Ω—É–∂–Ω—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ.\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–º:",
                reply_markup=remove_keyboard()
            )
            self.user_manager.set_user_state(user_id, 'awaiting_height')

        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:",
                reply_markup=get_user_type_keyboard()
            )

    async def handle_height(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        try:
            height = float(update.message.text)
            if height < 100 or height > 250:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (100-250 —Å–º):")
                return

            self.user_manager.set_user_state(user_id, 'awaiting_weight', {'height': height})
            await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–≥:")

        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

    async def handle_weight(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        try:
            weight = float(update.message.text)
            if weight < 30 or weight > 300:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (30-300 –∫–≥):")
                return

            user_data = self.user_manager.get_user_data(user_id)
            height = user_data['height']

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ö–ë–ñ–£ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            kbju = self.calculator.calculate_daily_kbju(
                weight=weight,
                height=height,
                age=25,  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤–æ–∑—Ä–∞—Å—Ç–∞
                gender='male',  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª–∞
                goal='maintenance'
            )

            self.db.update_user_metrics(user_id, height, weight, kbju['calories'])

            response = (
                "–í–∞—à–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –ö–ë–ñ–£:\n\n"
                f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {kbju['calories']} –∫–∫–∞–ª\n"
                f"‚Ä¢ –ë–µ–ª–∫–∏: {kbju['protein']} –≥\n"
                f"‚Ä¢ –ñ–∏—Ä—ã: {kbju['fat']} –≥\n"
                f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {kbju['carbs']} –≥\n\n"
                f"–ù–∞ –æ–¥–∏–Ω –ø—Ä–∏–µ–º –ø–∏—â–∏ (~3 –ø—Ä–∏–µ–º–∞):\n"
                f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {kbju['per_meal']['calories']} –∫–∫–∞–ª\n"
                f"‚Ä¢ –ë–µ–ª–∫–∏: {kbju['per_meal']['protein']} –≥\n"
                f"‚Ä¢ –ñ–∏—Ä—ã: {kbju['per_meal']['fat']} –≥\n"
                f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {kbju['per_meal']['carbs']} –≥\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!"
            )

            await update.message.reply_text(response)
            self.user_manager.set_user_state(user_id, 'ready')

        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id

        photo_file = await update.message.photo[-1].get_file()
        photo_bytes = await photo_file.download_as_bytearray()

        await update.message.reply_text("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ...")

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            analysis_result = self.vision.detect_food_items(bytes(photo_bytes))

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            self.user_manager.set_user_state(user_id, 'awaiting_confirmation', {
                'analysis_result': analysis_result,
                'photo_bytes': photo_bytes
            })

            if not analysis_result['food_items']:
                await update.message.reply_text(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ —Ñ–æ—Ç–æ.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –≤—Ä—É—á–Ω—É—é:"
                )
                self.user_manager.set_user_state(user_id, 'awaiting_food_name')
                return

            response = "–ù–∞ —Ñ–æ—Ç–æ —è –æ–ø—Ä–µ–¥–µ–ª–∏–ª:\n\n"
            total_calories = 0
            total_weight = 0

            for item in analysis_result['food_items']:
                weight = analysis_result['estimated_weights'].get(item['name'].lower(), 100)
                kbju = self.calculator.calculate_food_kbju(item['name'], weight)

                response += (
                    f"‚Ä¢ *{item['name'].title()}* (~{int(weight)}–≥):\n"
                    f" {kbju['calories']} –∫–∫–∞–ª | "
                    f" {kbju['protein']}–≥ | "
                    f" {kbju['fat']}–≥ | "
                    f" {kbju['carbs']}–≥\n\n"
                )
                total_calories += kbju['calories']
                total_weight += weight

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞—Ö –µ—Å–ª–∏ –æ–Ω–∏ –Ω–∞–π–¥–µ–Ω—ã
            if analysis_result.get('reference_detected'):
                response += "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —Å –ø–æ–º–æ—â—å—é –æ—Ä–∏–µ–Ω—Ç–∏—Ä–∞ –Ω–∞ —Ñ–æ—Ç–æ\n\n"
            else:
                response += "–°–æ–≤–µ—Ç: –î–ª—è –±–æ–ª—å—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ–ª–æ–∂–∏—Ç–µ —Ä—è–¥–æ–º –≤–∏–ª–∫—É –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω\n\n"

            response += f"*–ò—Ç–æ–≥–æ:* {int(total_calories)} –∫–∫–∞–ª (–æ–±—â–∏–π –≤–µ—Å ~{int(total_weight)}–≥)\n\n*–í—Å–µ –≤–µ—Ä–Ω–æ?*"

            await update.message.reply_text(response, parse_mode='Markdown', reply_markup=get_confirm_keyboard())

        except Exception as e:
            logger.error(f"Photo analysis error: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –≤—Ä—É—á–Ω—É—é:"
            )
            self.user_manager.set_user_state(user_id, 'awaiting_food_name')

    async def handle_reference_object(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user_data = self.user_manager.get_user_data(user_id)
        reference_choice = update.message.text

        reference_mapping = {
            '–í–∏–ª–∫–∞': 'fork',
            '–õ–æ–∂–∫–∞': 'spoon',
            '–¢–µ–ª–µ—Ñ–æ–Ω': 'phone',
            '–ö–∞—Ä—Ç–∞': 'credit card',
            '–õ–∞–¥–æ–Ω—å': 'hand',
            '–ë–µ–∑ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–∞': None
        }

        reference_object = reference_mapping.get(reference_choice)

        try:
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ç–æ —Å —É—á–µ—Ç–æ–º —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            analysis_result = self.vision.detect_food_items_with_reference(
                user_data['photo_bytes'],
                reference_object
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.user_manager.set_user_state(user_id, 'awaiting_confirmation', {
                'analysis_result': analysis_result,
                'photo_bytes': user_data['photo_bytes']
            })

            await self._send_food_analysis(update, analysis_result)

        except Exception as e:
            logger.error(f"Reference analysis error: {e}")
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é:"
            )
            self.user_manager.set_user_state(user_id, 'awaiting_food_name')

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
    async def _send_food_analysis(self, update, analysis_result):
        if not analysis_result['food_items']:
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ —Ñ–æ—Ç–æ.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –≤—Ä—É—á–Ω—É—é:"
            )
            return

        response = "–ù–∞ —Ñ–æ—Ç–æ —è –æ–ø—Ä–µ–¥–µ–ª–∏–ª:\n\n"
        total_calories = 0

        for item in analysis_result['food_items']:
            weight = analysis_result['estimated_weights'].get(item['name'].lower(), 100)
            kbju = self.calculator.calculate_food_kbju(item['name'], weight)

            response += (
                f"‚Ä¢ *{item['name'].title()}* (~{int(weight)}–≥):\n"
                f" {kbju['calories']} –∫–∫–∞–ª | "
                f" {kbju['protein']}–≥ | "
                f" {kbju['fat']}–≥ | "
                f" {kbju['carbs']}–≥\n\n"
            )
            total_calories += kbju['calories']

        if analysis_result['reference_detected']:
            response += "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É –Ω–∞ —Ñ–æ—Ç–æ\n\n"
        else:
            response += "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø—Ä–∏–º–µ—Ä–Ω–æ\n\n"

        response += f"–ò—Ç–æ–≥–æ: {int(total_calories)} –∫–∫–∞–ª\n\n–í—Å–µ –≤–µ—Ä–Ω–æ?"

        await update.message.reply_text(response, parse_mode='Markdown', reply_markup=get_confirm_keyboard())

    async def handle_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        user_id = update.effective_user.id
        message_text = update.message.text

        if '–¥–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ' in message_text.lower():
            user_data = self.user_manager.get_user_data(user_id)
            analysis_result = user_data.get('analysis_result', {})

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
            for item in analysis_result.get('food_items', []):
                weight = analysis_result['estimated_weights'].get(item['name'].lower(), 100)
                kbju = self.calculator.calculate_food_kbju(item['name'], weight)

                self.db.add_meal(
                    user_id=user_id,
                    food_name=item['name'],
                    weight_grams=weight,
                    calories=kbju['calories'],
                    protein=kbju['protein'],
                    fat=kbju['fat'],
                    carbs=kbju['carbs'],
                    meal_type='detected'
                )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            total_items = len(analysis_result.get('food_items', []))
            total_calories = sum(
                analysis_result['estimated_weights'].get(item['name'].lower(), 100) / 100 *
                self.calculator.calculate_food_kbju(item['name'], 100)['calories']
                for item in analysis_result.get('food_items', [])
            )

            await update.message.reply_text(
                f"–ü—Ä–∏–µ–º –ø–∏—â–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                f"‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {total_items}\n"
                f"‚Ä¢ –û–±—â–∏–µ –∫–∞–ª–æ—Ä–∏–∏: {int(total_calories)} –∫–∫–∞–ª\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.",
                reply_markup=remove_keyboard()
            )
            self.user_manager.set_user_state(user_id, 'ready')

        elif '–Ω–µ—Ç, –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é' in message_text.lower():
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –≤—Ä—É—á–Ω—É—é:\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã: –∫—É—Ä–∏—Ü–∞ –≥—Ä–∏–ª—å, –≥—Ä–µ—á–Ω–µ–≤–∞—è –∫–∞—à–∞, —Å–∞–ª–∞—Ç —Ü–µ–∑–∞—Ä—å, —Ä—ã–±–∞ —Å –æ–≤–æ—â–∞–º–∏",
                reply_markup=remove_keyboard()
            )
            self.user_manager.set_user_state(user_id, 'awaiting_food_name')
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:",
                reply_markup=get_confirm_keyboard()
            )

    async def handle_food_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥–∞"""
        user_id = update.effective_user.id
        food_name = update.message.text

        if not food_name or len(food_name.strip()) == 0:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞:")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –≤–µ—Å
        self.user_manager.set_user_state(user_id, 'awaiting_manual_weight', {
            'food_name': food_name.strip()
        })

        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å '{food_name}' –≤ –≥—Ä–∞–º–º–∞—Ö:",
            reply_markup=remove_keyboard()
        )

    async def handle_manual_weight(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤–µ—Å–∞"""
        user_id = update.effective_user.id
        user_data = self.user_manager.get_user_data(user_id)

        try:
            weight = float(update.message.text)
            food_name = user_data['food_name']

            if weight <= 0 or weight > 5000:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (1-5000 –≥—Ä–∞–º–º):")
                return

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ö–ë–ñ–£
            kbju = self.calculator.calculate_food_kbju(food_name, weight)

            response = (
                f"–ö–ë–ñ–£ –¥–ª—è {food_name} ({weight}–≥):\n\n"
                f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {kbju['calories']} –∫–∫–∞–ª\n"
                f"‚Ä¢ –ë–µ–ª–∫–∏: {kbju['protein']}–≥\n"
                f"‚Ä¢ –ñ–∏—Ä—ã: {kbju['fat']}–≥\n"
                f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {kbju['carbs']}–≥\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏:"
            )

            self.user_manager.set_user_state(user_id, 'awaiting_meal_type', {
                'food_name': food_name,
                'weight': weight,
                'kbju': kbju
            })

            await update.message.reply_text(response, reply_markup=get_meal_type_keyboard())

        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö):")

    async def handle_meal_type(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏"""
        user_id = update.effective_user.id
        user_data = self.user_manager.get_user_data(user_id)
        meal_type_text = update.message.text

        meal_type_mapping = {
            ' –∑–∞–≤—Ç—Ä–∞–∫': 'breakfast',
            ' –æ–±–µ–¥': 'lunch',
            ' –ø–µ—Ä–µ–∫—É—Å': 'snack',
            ' —É–∂–∏–Ω': 'dinner'
        }

        meal_type_en = meal_type_mapping.get(meal_type_text.lower(), 'other')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        self.db.add_meal(
            user_id=user_id,
            food_name=user_data['food_name'],
            weight_grams=user_data['weight'],
            calories=user_data['kbju']['calories'],
            protein=user_data['kbju']['protein'],
            fat=user_data['kbju']['fat'],
            carbs=user_data['kbju']['carbs'],
            meal_type=meal_type_en
        )

        await update.message.reply_text(
            f"{meal_type_text} —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
            "–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.",
            reply_markup=remove_keyboard()
        )
        self.user_manager.set_user_state(user_id, 'ready')

    async def handle_trainer_id(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        try:
            trainer_id = int(update.message.text)

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å —Ç—Ä–µ–Ω–µ—Ä-—É—á–µ–Ω–∏–∫
            self.db.add_trainer_trainee(trainer_id, user_id)

            await update.message.reply_text(
                "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Ç—Ä–µ–Ω–µ—Ä—É!\n\n"
                "–¢–µ–ø–µ—Ä—å —Ç—Ä–µ–Ω–µ—Ä –±—É–¥–µ—Ç –≤–∏–¥–µ—Ç—å –≤–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∏—Ç–∞–Ω–∏—è.",
                reply_markup=remove_keyboard()
            )

            self.user_manager.set_user_state(user_id, 'ready')

        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç—Ä–µ–Ω–µ—Ä–∞:")

    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞–ø–∏—Ç–∫–æ–≤
    async def drink_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /drink - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–∞"""
        user_id = update.effective_user.id

        await update.message.reply_text(
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–∞\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            parse_mode='Markdown',
            reply_markup=get_drink_categories_keyboard()
        )

        self.user_manager.set_user_state(user_id, 'awaiting_drink_category')

    async def handle_drink_method(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–∏—Ç–∫–∞"""
        user_id = update.effective_user.id
        method = update.message.text

        if '–≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ' in method.lower():
            await update.message.reply_text(
                "–í–≤–æ–¥ –Ω–∞–ø–∏—Ç–∫–∞\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞–ø–∏—Ç–∫–∞:",
                parse_mode='Markdown',
                reply_markup=get_drink_categories_keyboard()
            )
            self.user_manager.set_user_state(user_id, 'awaiting_drink_category')

        # –£–ë–ò–†–ê–ï–ú –±–ª–æ–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:",
                reply_markup=get_drink_method_keyboard()
            )

    async def handle_drink_category(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–ø–∏—Ç–∫–∞"""
        user_id = update.effective_user.id
        category = update.message.text

        if '–¥—Ä—É–≥–æ–µ' in category.lower():
            await update.message.reply_text(
                "üìù *–í–≤–æ–¥ –Ω–∞–ø–∏—Ç–∫–∞*\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–∞:\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ –ö–∞–ø—É—á–∏–Ω–æ\n"
                "‚Ä¢ –Ø–±–ª–æ—á–Ω—ã–π —Å–æ–∫\n"
                "‚Ä¢ –ú–∏–Ω–µ—Ä–∞–ª—å–Ω–∞—è –≤–æ–¥–∞\n"
                "‚Ä¢ –ó–µ–ª–µ–Ω—ã–π —á–∞–π",
                parse_mode='Markdown',
                reply_markup=remove_keyboard()
            )
            self.user_manager.set_user_state(user_id, 'awaiting_drink_name')

        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            await update.message.reply_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–∏—Ç–æ–∫ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}:",
                reply_markup=self._get_drinks_by_category(category)
            )
            self.user_manager.set_user_state(user_id, 'awaiting_drink_selection')

    def _get_drinks_by_category(self, category):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–ø–∏—Ç–∫–∞–º–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        from telegram import ReplyKeyboardMarkup

        drinks_by_category = {
            '–≤–æ–¥–∞': [
                ['–í–æ–¥–∞ –Ω–µ–≥–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è', '–í–æ–¥–∞ –≥–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è'],
                ['–ú–∏–Ω–µ—Ä–∞–ª—å–Ω–∞—è –≤–æ–¥–∞', 'üìù –î—Ä—É–≥–∞—è –≤–æ–¥–∞']
            ],
            '–≥–∞–∑–∏—Ä–æ–≤–∫–∞': [
                ['–ö–æ–ª–∞', '–ü–µ–ø—Å–∏'],
                ['–°–ø—Ä–∞–π—Ç', '–§–∞–Ω—Ç–∞'],
                ['–î—Ä—É–≥–∞—è –≥–∞–∑–∏—Ä–æ–≤–∫–∞']
            ],
            '–∫–æ—Ñ–µ/—á–∞–π': [
                ['–ß–µ—Ä–Ω—ã–π –∫–æ—Ñ–µ', '–ö–æ—Ñ–µ —Å –º–æ–ª–æ–∫–æ–º'],
                ['–ö–∞–ø—É—á–∏–Ω–æ', '–õ–∞—Ç—Ç–µ'],
                ['–ß–µ—Ä–Ω—ã–π —á–∞–π', '–ó–µ–ª–µ–Ω—ã–π —á–∞–π'],
                ['–î—Ä—É–≥–æ–π –Ω–∞–ø–∏—Ç–æ–∫']
            ],
            '—Å–æ–∫': [
                ['–ê–ø–µ–ª—å—Å–∏–Ω–æ–≤—ã–π —Å–æ–∫', '–Ø–±–ª–æ—á–Ω—ã–π —Å–æ–∫'],
                ['–¢–æ–º–∞—Ç–Ω—ã–π —Å–æ–∫', '–ú—É–ª—å—Ç–∏—Ñ—Ä—É–∫—Ç–æ–≤—ã–π —Å–æ–∫'],
                ['–î—Ä—É–≥–æ–π —Å–æ–∫']
            ],
            '–º–æ–ª–æ—á–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫': [
                ['–ú–æ–ª–æ–∫–æ', '–ö–µ—Ñ–∏—Ä'],
                ['–ô–æ–≥—É—Ä—Ç –ø–∏—Ç—å–µ–≤–æ–π', '–†—è–∂–µ–Ω–∫–∞'],
                ['–î—Ä—É–≥–æ–π –º–æ–ª–æ—á–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫']
            ],
            '–∞–ª–∫–æ–≥–æ–ª—å': [
                ['–ü–∏–≤–æ', '–í–∏–Ω–æ –∫—Ä–∞—Å–Ω–æ–µ'],
                ['–í–∏–Ω–æ –±–µ–ª–æ–µ', '–®–∞–º–ø–∞–Ω—Å–∫–æ–µ'],
                ['–î—Ä—É–≥–æ–π –∞–ª–∫–æ–≥–æ–ª—å']
            ],
            '—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫': [
                ['Red Bull', 'Burn'],
                ['Adrenaline Rush', 'üìù –î—Ä—É–≥–æ–π —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫']
            ],
            '—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫': [
                ['–ò–∑–æ—Ç–æ–Ω–∏–∫', '–ü—Ä–æ—Ç–µ–∏–Ω–æ–≤—ã–π –∫–æ–∫—Ç–µ–π–ª—å'],
                ['–î—Ä—É–≥–æ–π —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫']
            ]
        }

        drinks = drinks_by_category.get(category.lower(), [['–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é']])
        return ReplyKeyboardMarkup(drinks, one_time_keyboard=True, resize_keyboard=True)

    async def handle_drink_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞"""
        user_id = update.effective_user.id
        drink_name = update.message.text

        if '–¥—Ä—É–≥–æ–π' in drink_name.lower() or '–¥—Ä—É–≥–∞—è' in drink_name.lower():
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–∞:",
                reply_markup=remove_keyboard()
            )
            self.user_manager.set_user_state(user_id, 'awaiting_drink_name')
        else:
            # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ
            clean_drink_name = ''.join(char for char in drink_name if char.isalpha() or char.isspace()).strip()

            await update.message.reply_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–º –¥–ª—è '{clean_drink_name}':",
                reply_markup=get_drink_volumes_keyboard()
            )
            self.user_manager.set_user_state(user_id, 'awaiting_drink_volume', {
                'drink_name': clean_drink_name
            })

    async def handle_drink_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞–ø–∏—Ç–∫–∞"""
        user_id = update.effective_user.id
        drink_name = update.message.text

        if not drink_name.strip():
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–∞:")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–∞ –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –æ–±—ä–µ–º
        self.user_manager.set_user_state(user_id, 'awaiting_drink_volume', {
            'drink_name': drink_name.strip()
        })

        await update.message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–º –¥–ª—è '{drink_name}':",
            reply_markup=get_drink_volumes_keyboard()
        )

    async def handle_drink_volume(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–±—ä–µ–º–∞ –Ω–∞–ø–∏—Ç–∫–∞"""
        user_id = update.effective_user.id
        user_data = self.user_manager.get_user_data(user_id)
        volume_text = update.message.text

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ–±—ä–µ–º–æ–≤
        volume_mapping = {
            '250–º–ª (—Å—Ç–∞–∫–∞–Ω)': 250,
            '330–º–ª (–±–∞–Ω–∫–∞)': 330,
            '500–º–ª (–±—É—Ç—ã–ª–∫–∞)': 500,
            '1000–º–ª (–ª–∏—Ç—Ä)': 1000
        }

        if volume_text in volume_mapping:
            volume_ml = volume_mapping[volume_text]
        elif '–¥—Ä—É–≥–æ–π –æ–±—ä–µ–º' in volume_text.lower():
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –Ω–∞–ø–∏—Ç–∫–∞ –≤ –º–ª:\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ 200 (–¥–ª—è –º–∞–ª–µ–Ω—å–∫–æ–π —á–∞—à–∫–∏)\n"
                "‚Ä¢ 330 (–¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±–∞–Ω–∫–∏)\n"
                "‚Ä¢ 500 (–¥–ª—è –±—É—Ç—ã–ª–∫–∏)\n"
                "‚Ä¢ 750 (–¥–ª—è –±—É—Ç—ã–ª–∫–∏ –≤–∏–Ω–∞)",
                reply_markup=remove_keyboard()
            )
            self.user_manager.set_user_state(user_id, 'awaiting_drink_custom_volume')
            return
        else:
            try:
                volume_ml = float(volume_text)
            except ValueError:
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:",
                    reply_markup=get_drink_volumes_keyboard()
                )
                return

        drink_name = user_data['drink_name']

        if volume_ml <= 0 or volume_ml > 5000:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–º (1-5000 –º–ª):",
                reply_markup=get_drink_volumes_keyboard()
            )
            return

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ö–ë–ñ–£ –¥–ª—è –Ω–∞–ø–∏—Ç–∫–∞
        kbju = self.drink_manager.get_drink_kbju(drink_name, volume_ml)

        response = (
            f"{drink_name.title()} ({volume_ml}–º–ª):\n\n"
            f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {kbju['calories']} –∫–∫–∞–ª\n"
            f"‚Ä¢ –ë–µ–ª–∫–∏: {kbju['protein']}–≥\n"
            f"‚Ä¢ –ñ–∏—Ä—ã: {kbju['fat']}–≥\n"
            f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {kbju['carbs']}–≥\n\n"
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–ø–∏—Ç–æ–∫?"
        )

        self.user_manager.set_user_state(user_id, 'awaiting_drink_confirmation', {
            'drink_name': drink_name,
            'volume_ml': volume_ml,
            'kbju': kbju
        })

        await update.message.reply_text(response, parse_mode='Markdown', reply_markup=get_yes_no_keyboard())

    async def handle_drink_custom_volume(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –æ–±—ä–µ–º–∞"""
        user_id = update.effective_user.id
        user_data = self.user_manager.get_user_data(user_id)

        try:
            volume_ml = float(update.message.text)
            drink_name = user_data['drink_name']

            if volume_ml <= 0 or volume_ml > 5000:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–º (1-5000 –º–ª):")
                return

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ö–ë–ñ–£ –¥–ª—è –Ω–∞–ø–∏—Ç–∫–∞
            kbju = self.drink_manager.get_drink_kbju(drink_name, volume_ml)

            response = (
                f"{drink_name.title()} ({volume_ml}–º–ª):\n\n"
                f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {kbju['calories']} –∫–∫–∞–ª\n"
                f"‚Ä¢ –ë–µ–ª–∫–∏: {kbju['protein']}–≥\n"
                f"‚Ä¢ –ñ–∏—Ä—ã: {kbju['fat']}–≥\n"
                f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {kbju['carbs']}–≥\n\n"
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–ø–∏—Ç–æ–∫?"
            )

            self.user_manager.set_user_state(user_id, 'awaiting_drink_confirmation', {
                'drink_name': drink_name,
                'volume_ml': volume_ml,
                'kbju': kbju
            })

            await update.message.reply_text(response, parse_mode='Markdown', reply_markup=get_yes_no_keyboard())

        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–æ–±—ä–µ–º –≤ –º–ª):")

    async def handle_drink_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–ø–∏—Ç–∫–∞"""
        user_id = update.effective_user.id
        message_text = update.message.text
        user_data = self.user_manager.get_user_data(user_id)

        if '–¥–∞' in message_text.lower():
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–∏—Ç–æ–∫ –≤ –±–∞–∑—É
            self.db.add_meal(
                user_id=user_id,
                food_name=f"{user_data['drink_name']} (–Ω–∞–ø–∏—Ç–æ–∫)",
                weight_grams=user_data['volume_ml'],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–ª –∫–∞–∫ –≤–µ—Å
                calories=user_data['kbju']['calories'],
                protein=user_data['kbju']['protein'],
                fat=user_data['kbju']['fat'],
                carbs=user_data['kbju']['carbs'],
                meal_type='drink'
            )

            await update.message.reply_text(
                "–ù–∞–ø–∏—Ç–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                "–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –Ω–∞–ø–∏—Ç–∫–æ–≤ –∏–ª–∏ –µ–¥—ã.",
                reply_markup=remove_keyboard()
            )
            self.user_manager.set_user_state(user_id, 'ready')

        elif '–Ω–µ—Ç' in message_text.lower():
            await update.message.reply_text(
                "–ù–∞–ø–∏—Ç–æ–∫ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\n"
                "–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π –Ω–∞–ø–∏—Ç–æ–∫ –∏–ª–∏ –µ–¥—É.",
                reply_markup=remove_keyboard()
            )
            self.user_manager.set_user_state(user_id, 'ready')
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –î–∞ –∏–ª–∏ –ù–µ—Ç:",
                reply_markup=get_yes_no_keyboard()
            )

    # –ö–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –æ—Ç—á–µ—Ç–æ–≤
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        help_text = """
    –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é FITHUB

    –°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:
    ‚Ä¢ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –µ–¥—É —Å–≤–µ—Ä—Ö—É
    ‚Ä¢ –ü–æ–ª–æ–∂–∏—Ç–µ —Ä—è–¥–æ–º –≤–∏–ª–∫—É, —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –∫–∞—Ä—Ç—É –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Å–∞
    ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ö–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
    ‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –Ω–∞ –æ–¥–Ω–æ—Ç–æ–Ω–Ω–æ–º —Ñ–æ–Ω–µ

    –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
    /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è
    /profile - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
    /drink - –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–∏—Ç–æ–∫
    /id - –£–∑–Ω–∞—Ç—å —Å–≤–æ–π ID –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞

    –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–∑–≤–∞–Ω–∏–π –±–ª—é–¥:
    ‚Ä¢ –ö—É—Ä–∏—Ü–∞ –≥—Ä–∏–ª—å
    ‚Ä¢ –ì—Ä–µ—á–Ω–µ–≤–∞—è –∫–∞—à–∞  
    ‚Ä¢ –°–∞–ª–∞—Ç —Ü–µ–∑–∞—Ä—å
    ‚Ä¢ –†—ã–±–∞ —Å –æ–≤–æ—â–∞–º–∏
    """
        await update.message.reply_text(help_text, parse_mode='Markdown')

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats"""
        user_id = update.effective_user.id
        today = datetime.now().strftime('%Y-%m-%d')

        meals = self.db.get_daily_intake(user_id, today)

        if not meals:
            await update.message.reply_text("–ó–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø–∏—Ç–∞–Ω–∏–∏.")
            return

        total_calories = sum(meal['calories'] for meal in meals)
        total_protein = sum(meal['protein'] for meal in meals)
        total_fat = sum(meal['fat'] for meal in meals)
        total_carbs = sum(meal['carbs'] for meal in meals)

        # –ü–æ–ª—É—á–∞–µ–º –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = self.db.get_user(user_id)
        daily_calories = user_data.get('daily_calories', 2000) if user_data else 2000

        progress = min(100, int((total_calories / daily_calories) * 100))

        # –û–ö–†–£–ì–õ–Ø–ï–ú –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ —Å–æ—Ç—ã—Ö
        stats_text = f"""
    –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è

    –ü—Ä–∏–µ–º—ã –ø–∏—â–∏: {len(meals)}
    –°—ä–µ–¥–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {round(total_calories, 2)} / {daily_calories} –∫–∫–∞–ª
    –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%

    –ë–ñ–£ –∑–∞ –¥–µ–Ω—å:
    ‚Ä¢ –ë–µ–ª–∫–∏: {round(total_protein, 2)}–≥
    ‚Ä¢ –ñ–∏—Ä—ã: {round(total_fat, 2)}–≥  
    ‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {round(total_carbs, 2)}–≥

    *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏:*
    """

        for meal in meals[-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø—Ä–∏–µ–º–∞
            time = meal['created_at'].strftime('%H:%M') if meal['created_at'] else '--:--'
            stats_text += f"‚Ä¢ {meal['food_name']} - {round(meal['calories'], 2)} –∫–∫–∞–ª ({time})\n"

        await update.message.reply_text(stats_text, parse_mode='Markdown')

    async def profile_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /profile"""
        user_id = update.effective_user.id
        user_data = self.db.get_user(user_id)

        if not user_data:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
            return

        profile_text = f"""
    –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å

    –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
    ‚Ä¢ –†–æ—Å—Ç: {user_data.get('height', '–ù–µ —É–∫–∞–∑–∞–Ω')} —Å–º
    ‚Ä¢ –í–µ—Å: {user_data.get('weight', '–ù–µ —É–∫–∞–∑–∞–Ω')} –∫–≥
    ‚Ä¢ –¢–∏–ø: {'–¢—Ä–µ–Ω–µ—Ä' if user_data.get('user_type') == 'trainer' else '–£—á–µ–Ω–∏–∫'}

    –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –Ω–æ—Ä–º–∞:
    ‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {round(user_data.get('daily_calories', 0), 2) if user_data.get('daily_calories') else '–ù–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ'} –∫–∫–∞–ª/–¥–µ–Ω—å
    """

        if user_data.get('user_type') == 'trainee' and user_data.get('trainer_id'):
            profile_text += f"‚Ä¢ –¢—Ä–µ–Ω–µ—Ä: ID {user_data.get('trainer_id')}"

        await update.message.reply_text(profile_text, parse_mode='Markdown')

    async def report_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /report"""
        user_id = update.effective_user.id
        today = datetime.now().strftime('%Y-%m-%d')

        meals = self.db.get_daily_intake(user_id, today)

        if not meals:
            await update.message.reply_text("–ó–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø–∏—Ç–∞–Ω–∏–∏.")
            return

        total_calories = sum(meal['calories'] for meal in meals)
        total_protein = sum(meal['protein'] for meal in meals)
        total_fat = sum(meal['fat'] for meal in meals)
        total_carbs = sum(meal['carbs'] for meal in meals)

        report_text = f"""
    –û—Ç—á–µ—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∑–∞ {today}

    –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
    ‚Ä¢ –ü—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: {len(meals)}
    ‚Ä¢ –û–±—â–∏–µ –∫–∞–ª–æ—Ä–∏–∏: {round(total_calories, 2)} –∫–∫–∞–ª
    ‚Ä¢ –ë–µ–ª–∫–∏: {round(total_protein, 2)}–≥
    ‚Ä¢ –ñ–∏—Ä—ã: {round(total_fat, 2)}–≥
    ‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {round(total_carbs, 2)}–≥

    *–î–µ—Ç–∞–ª–∏ –ø–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏:*
    """

        for i, meal in enumerate(meals, 1):
            time = meal['created_at'].strftime('%H:%M') if meal['created_at'] else '--:--'
            report_text += f"""
    {i}. *{meal['food_name']}* ({meal['weight_grams']}–≥)
       Ô∏è {round(meal['calories'], 2)} –∫–∫–∞–ª |  {round(meal['protein'], 2)}–≥ |  {round(meal['fat'], 2)}–≥ |  {round(meal['carbs'], 2)}–≥
        {time}
    """

        await update.message.reply_text(report_text, parse_mode='Markdown')

    async def reset_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reset - —Å–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        user_id = update.effective_user.id
        today = datetime.now().strftime('%Y-%m-%d')

        try:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ –ø–∏—Ç–∞–Ω–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            with self.db.conn.cursor() as cur:
                cur.execute(
                    'DELETE FROM meals WHERE user_id = %s AND DATE(created_at) = %s',
                    (user_id, today)
                )
                self.db.conn.commit()

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.user_manager.set_user_state(user_id, 'ready')

            await update.message.reply_text(
                "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è —Å–±—Ä–æ—à–µ–Ω–∞!\n\n"
                "–í—Å–µ –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏ —É–¥–∞–ª–µ–Ω—ã. "
                "–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è –∑–∞–Ω–æ–≤–æ.",
                reply_markup=remove_keyboard()
            )

        except Exception as e:
            logger.error(f"Reset error: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def id_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /id - –ø–æ–∫–∞–∑–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id

        await update.message.reply_text(
            f"–í–∞—à ID: `{user_id}`\n\n"
            "–ü–µ—Ä–µ–¥–∞–π—Ç–µ —ç—Ç–æ—Ç ID –≤–∞—à–µ–º—É —Ç—Ä–µ–Ω–µ—Ä—É, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –≤–∏–¥–µ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∏—Ç–∞–Ω–∏—è.\n\n"
            "–¢—Ä–µ–Ω–µ—Ä –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –∫–æ–º–∞–Ω–¥–æ–π:\n"
            "`/add_trainee –≤–∞—à_id`",
            parse_mode='Markdown'
        )

    async def add_trainee_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /add_trainee - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–º"""
        user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ç—Ä–µ–Ω–µ—Ä
        user_data = self.db.get_user(user_id)
        if not user_data or user_data.get('user_type') != 'trainer':
            await update.message.reply_text(
                "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä–∞–º.\n\n"
                "–ï—Å–ª–∏ –≤—ã —Ç—Ä–µ–Ω–µ—Ä, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–∞–∫ —Ç—Ä–µ–Ω–µ—Ä —á–µ—Ä–µ–∑ /start"
            )
            return

        if not context.args:
            await update.message.reply_text(
                "–£–∫–∞–∂–∏—Ç–µ ID —É—á–µ–Ω–∏–∫–∞.\n\n"
                "–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n"
                "`/add_trainee 123456789`\n\n"
                "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /id —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ ID",
                parse_mode='Markdown'
            )
            return

        try:
            trainee_id = int(context.args[0])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—á–µ–Ω–∏–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            trainee_data = self.db.get_user(trainee_id)
            if not trainee_data:
                await update.message.reply_text(
                    "–£—á–µ–Ω–∏–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                    "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start"
                )
                return

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å —Ç—Ä–µ–Ω–µ—Ä-—É—á–µ–Ω–∏–∫
            self.db.add_trainer_trainee(user_id, trainee_id)

            await update.message.reply_text(
                f"–£—á–µ–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"ID —É—á–µ–Ω–∏–∫–∞: {trainee_id}\n"
                f"–ò–º—è: {trainee_data.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç—á–µ—Ç—ã –æ –µ–≥–æ –ø–∏—Ç–∞–Ω–∏–∏."
            )

        except ValueError:
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.\n\n"
                "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä:\n"
                "`/add_trainee 123456789`",
                parse_mode='Markdown'
            )

    async def trainees_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /trainees - —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ —Ç—Ä–µ–Ω–µ—Ä–∞"""
        user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ç—Ä–µ–Ω–µ—Ä
        user_data = self.db.get_user(user_id)
        if not user_data or user_data.get('user_type') != 'trainer':
            await update.message.reply_text(
                "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä–∞–º."
            )
            return

        try:
            trainees = self.db.get_trainees(user_id)

            if not trainees:
                await update.message.reply_text(
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤.\n\n"
                    "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞:\n"
                    "1. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /id\n"
                    "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_trainee [ID]"
                )
                return

            trainees_text = "–í–∞—à–∏ —É—á–µ–Ω–∏–∫–∏:\n\n"

            for trainee in trainees:
                today = datetime.now().strftime('%Y-%m-%d')
                trainee_meals = self.db.get_daily_intake(trainee['id'], today)
                total_calories = sum(meal['calories'] for meal in trainee_meals)

                trainees_text += (
                    f"*{trainee.get('first_name', '–£—á–µ–Ω–∏–∫')}* (ID: `{trainee['id']}`)\n"
                    f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–π —Å–µ–≥–æ–¥–Ω—è: {total_calories} –∫–∫–∞–ª\n"
                    f"‚Ä¢ –ü—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: {len(trainee_meals)}\n\n"
                )

            await update.message.reply_text(trainees_text, parse_mode='Markdown')

        except Exception as e:
            logger.error(f"Trainees command error: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–µ–Ω–∏–∫–æ–≤."
            )

    async def _check_meal_reminders(self, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏"""
        try:
            now = datetime.now()

            # –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (—á–∞—Å—ã, –º–∏–Ω—É—Ç—ã, —Å–æ–æ–±—â–µ–Ω–∏–µ)
            reminder_times = [
                (8, 0,
                 "–í—Ä–µ–º—è –∑–∞–≤—Ç—Ä–∞–∫–∞!\n\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–∑–∞–≤—Ç—Ä–∞–∫–∞—Ç—å –∏ –∑–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –º–µ—Ç–∞–±–æ–ª–∏–∑–º –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è."),
                (13, 0, "–í—Ä–µ–º—è –æ–±–µ–¥–∞!\n\n–ü–æ—Ä–∞ –ø–æ–¥–∫—Ä–µ–ø–∏—Ç—å—Å—è! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ–±–µ–¥–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é."),
                (19, 0,
                 "–í—Ä–µ–º—è —É–∂–∏–Ω–∞!\n\n–õ–µ–≥–∫–∏–π —É–∂–∏–Ω –∑–∞ 3-4 —á–∞—Å–∞ –¥–æ —Å–Ω–∞ –ø–æ–º–æ–∂–µ—Ç —Ö–æ—Ä–æ—à–æ –≤—ã—Å–ø–∞—Ç—å—Å—è –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ä–º—É."),
                (11, 0, "–í—Ä–µ–º—è –ø–µ—Ä–µ–∫—É—Å–∞!\n\n–ù–µ–±–æ–ª—å—à–æ–π –ø–µ—Ä–µ–∫—É—Å –ø–æ–º–æ–∂–µ—Ç –¥–æ–∂–¥–∞—Ç—å—Å—è –æ–±–µ–¥–∞ –±–µ–∑ —á—É–≤—Å—Ç–≤–∞ –≥–æ–ª–æ–¥–∞."),
                (16, 0, "–í—Ä–µ–º—è –ø–æ–ª–¥–Ω–∏–∫–∞!\n\n–í—Ç–æ—Ä–æ–π –ø–µ—Ä–µ–∫—É—Å –ø–æ–¥–¥–µ—Ä–∂–∏—Ç —ç–Ω–µ—Ä–≥–∏—é –¥–æ –≤–µ—á–µ—Ä–∞.")
            ]

            for hour, minute, message in reminder_times:
                if now.hour == hour and now.minute == minute:
                    await self._send_reminders_to_active_users(context, message)

        except Exception as e:
            logger.error(f"Error in meal reminders: {e}")

    async def _send_reminders_to_active_users(self, context: ContextTypes.DEFAULT_TYPE, message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–≥–æ–¥–Ω—è –±—ã–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã
            today = datetime.now().strftime('%Y-%m-%d')
            active_users = self._get_todays_active_users(today)

            for user_id in active_users:
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=message,
                        parse_mode='Markdown'
                    )
                    logger.info(f"Meal reminder sent to user {user_id}")
                except Exception as e:
                    logger.error(f"Failed to send reminder to {user_id}: {e}")

        except Exception as e:
            logger.error(f"Error sending reminders: {e}")

    def _get_todays_active_users(self, date):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è"""
        try:
            # –í—Ä–µ–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            # –ù–∞–ø—Ä–∏–º–µ—Ä: SELECT DISTINCT user_id FROM meals WHERE DATE(created_at) = %s
            return []
        except Exception as e:
            logger.error(f"Error getting active users: {e}")
            return []

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"""
        # –°–æ–∑–¥–∞–µ–º Application —Å JobQueue
        application = Application.builder().token(Config.BOT_TOKEN).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("stats", self.stats_command))
        application.add_handler(CommandHandler("profile", self.profile_command))
        application.add_handler(CommandHandler("report", self.report_command))
        application.add_handler(CommandHandler("reset", self.reset_command))
        application.add_handler(CommandHandler("id", self.id_command))
        application.add_handler(CommandHandler("drink", self.drink_command))
        application.add_handler(CommandHandler("add_trainee", self.add_trainee_command))
        application.add_handler(CommandHandler("trainees", self.trainees_command))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –µ—Å–ª–∏ JobQueue –¥–æ—Å—Ç—É–ø–µ–Ω
        if application.job_queue:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            application.job_queue.run_repeating(
                self._check_meal_reminders,
                interval=60,  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                first=10  # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
            )
            logger.info("Meal reminders system started")
        else:
            logger.warning("JobQueue not available - meal reminders disabled")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling()


if __name__ == '__main__':
    bot = FithubBot()
    bot.run()
