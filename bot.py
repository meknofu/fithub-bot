import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackContext
from config import Config
from database import db
from vision_api import VisionAPI
from kbju_calculator import KBJUCalculator
from user_manager import UserManager
from keyboards import *
import io
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class FithubBot:
    def __init__(self):
        self.db = db
        self.vision = VisionAPI()
        self.calculator = KBJUCalculator()
        self.user_manager = UserManager()
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        user_data = {
            'id': user.id,
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name
        }
        
        await update.message.reply_html(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FITHUB!\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å",
            reply_markup=get_user_type_keyboard()
        )
        
        self.user_manager.set_user_state(user.id, 'awaiting_user_type')

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        message_text = update.message.text
        state = self.user_manager.get_user_state(user_id)
        
        logger.info(f"User {user_id} state: {state}, message: {message_text}")
        
        if state == 'awaiting_user_type':
            await self.handle_user_type(update, context)
        elif state == 'awaiting_height':
            await self.handle_height(update, context)
        elif state == 'awaiting_weight':
            await self.handle_weight(update, context)
        elif state == 'awaiting_trainer_id':
            await self.handle_trainer_id(update, context)
        elif state == 'awaiting_confirmation':
            await self.handle_confirmation(update, context)
        elif state == 'awaiting_food_name':
            await self.handle_food_name(update, context)
        elif state == 'awaiting_manual_weight':
            await self.handle_manual_weight(update, context)
        elif state == 'awaiting_meal_type':
            await self.handle_meal_type(update, context)
        else:
            # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
            await update.message.reply_text(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã.",
                reply_markup=remove_keyboard()
            )

    async def handle_user_type(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        message_text = update.message.text
        
        if '—Ç—Ä–µ–Ω–µ—Ä' in message_text.lower():
            user_type = 'trainer'
            self.db.add_user({
                'id': user_id,
                'username': update.effective_user.username,
                'first_name': update.effective_user.first_name,
                'last_name': update.effective_user.last_name,
                'user_type': user_type
            })
            
            await update.message.reply_text(
                "–û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ç—Ä–µ–Ω–µ—Ä. üèãÔ∏è\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å —É—á–µ–Ω–∏–∫–æ–≤\n"
                "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Ö —Ä–∞—Ü–∏–æ–Ω\n"
                "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –æ—Ç—á–µ—Ç—ã –æ –ø–∏—Ç–∞–Ω–∏–∏\n\n"
                "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º —Å–≤–æ–π ID:",
                reply_markup=remove_keyboard()
            )
            
        elif '—É—á–µ–Ω–∏–∫' in message_text.lower():
            user_type = 'trainee'
            self.db.add_user({
                'id': user_id,
                'username': update.effective_user.username,
                'first_name': update.effective_user.first_name,
                'last_name': update.effective_user.last_name,
                'user_type': user_type
            })
            
            await update.message.reply_text(
                "–û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–µ–Ω–∏–∫. üßë‚Äçüéì\n\n"
                "–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–∞—à–µ–π –Ω–æ—Ä–º—ã –ö–ë–ñ–£ –º–Ω–µ –Ω—É–∂–Ω—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–º:",
                reply_markup=remove_keyboard()
            )
            self.user_manager.set_user_state(user_id, 'awaiting_height')
            
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:",
                reply_markup=get_user_type_keyboard()
            )

    async def handle_height(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        try:
            height = float(update.message.text)
            if height < 100 or height > 250:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (100-250 —Å–º):")
                return
                
            self.user_manager.set_user_state(user_id, 'awaiting_weight', {'height': height})
            await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–≥:")
            
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

    async def handle_weight(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        try:
            weight = float(update.message.text)
            if weight < 30 or weight > 300:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (30-300 –∫–≥):")
                return
                
            user_data = self.user_manager.get_user_data(user_id)
            height = user_data['height']
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ö–ë–ñ–£ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            kbju = self.calculator.calculate_daily_kbju(
                weight=weight, 
                height=height, 
                age=25,  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤–æ–∑—Ä–∞—Å—Ç–∞
                gender='male',  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª–∞
                goal='maintenance'
            )
            
            self.db.update_user_metrics(user_id, height, weight, kbju['calories'])
            
            response = (
                "üìä –í–∞—à–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –ö–ë–ñ–£:\n\n"
                f"‚Ä¢ üçΩÔ∏è –ö–∞–ª–æ—Ä–∏–∏: {kbju['calories']} –∫–∫–∞–ª\n"
                f"‚Ä¢ ü•© –ë–µ–ª–∫–∏: {kbju['protein']} –≥\n"
                f"‚Ä¢ ü•ë –ñ–∏—Ä—ã: {kbju['fat']} –≥\n"
                f"‚Ä¢ üçö –£–≥–ª–µ–≤–æ–¥—ã: {kbju['carbs']} –≥\n\n"
                f"–ù–∞ –æ–¥–∏–Ω –ø—Ä–∏–µ–º –ø–∏—â–∏ (~3 –ø—Ä–∏–µ–º–∞):\n"
                f"‚Ä¢ üçΩÔ∏è –ö–∞–ª–æ—Ä–∏–∏: {kbju['per_meal']['calories']} –∫–∫–∞–ª\n"
                f"‚Ä¢ ü•© –ë–µ–ª–∫–∏: {kbju['per_meal']['protein']} –≥\n"
                f"‚Ä¢ ü•ë –ñ–∏—Ä—ã: {kbju['per_meal']['fat']} –≥\n"
                f"‚Ä¢ üçö –£–≥–ª–µ–≤–æ–¥—ã: {kbju['per_meal']['carbs']} –≥\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞! üì∏"
            )
            
            await update.message.reply_text(response)
            self.user_manager.set_user_state(user_id, 'ready')
            
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id

        photo_file = await update.message.photo[-1].get_file()
        photo_bytes = await photo_file.download_as_bytearray()

        await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ...")

        try:
            # –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Vision API
            analysis_result = self.vision.detect_food_items(bytes(photo_bytes))

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            self.user_manager.set_user_state(user_id, 'awaiting_confirmation', {
                'analysis_result': analysis_result,
                'photo_bytes': photo_bytes
            })

            if not analysis_result['food_items']:
                await update.message.reply_text(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ —Ñ–æ—Ç–æ. üòï\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –≤—Ä—É—á–Ω—É—é:"
                )
                self.user_manager.set_user_state(user_id, 'awaiting_food_name')
                return

            response = "üì∏ –ù–∞ —Ñ–æ—Ç–æ —è –æ–ø—Ä–µ–¥–µ–ª–∏–ª:\n\n"
            total_calories = 0
            total_weight = 0

            for item in analysis_result['food_items']:
                weight = analysis_result['estimated_weights'].get(item['name'].lower(), 100)
                kbju = self.calculator.calculate_food_kbju(item['name'], weight)

                response += (
                    f"‚Ä¢ {item['name'].title()} (~{weight}–≥):\n"
                    f"  üçΩÔ∏è {kbju['calories']} –∫–∫–∞–ª | "
                    f"ü•© {kbju['protein']}–≥ | "
                    f"ü•ë {kbju['fat']}–≥ | "
                    f"üçö {kbju['carbs']}–≥\n\n"
                )
                total_calories += kbju['calories']
                total_weight += weight

            response += f"üìä –ò—Ç–æ–≥–æ: {total_calories} –∫–∫–∞–ª (–æ–±—â–∏–π –≤–µ—Å ~{total_weight}–≥)\n\n–í—Å–µ –≤–µ—Ä–Ω–æ?"

            await update.message.reply_text(response, reply_markup=get_confirm_keyboard())

        except Exception as e:
            logger.error(f"Photo analysis error: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ. üòï\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –≤—Ä—É—á–Ω—É—é:"
            )
            self.user_manager.set_user_state(user_id, 'awaiting_food_name')

    async def handle_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        user_id = update.effective_user.id
        message_text = update.message.text

        if '–¥–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ' in message_text.lower():
            user_data = self.user_manager.get_user_data(user_id)
            analysis_result = user_data.get('analysis_result', {})

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ö–ê–ñ–î–´–ô —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å
            for item in analysis_result.get('food_items', []):
                weight = analysis_result['estimated_weights'].get(item['name'].lower(), 100)
                kbju = self.calculator.calculate_food_kbju(item['name'], weight)

                self.db.add_meal(
                    user_id=user_id,
                    food_name=item['name'],
                    weight_grams=weight,
                    calories=kbju['calories'],
                    protein=kbju['protein'],
                    fat=kbju['fat'],
                    carbs=kbju['carbs'],
                    meal_type='detected'
                )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            total_items = len(analysis_result.get('food_items', []))
            total_calories = sum(
                analysis_result['estimated_weights'].get(item['name'].lower(), 100) / 100 *
                self.calculator.calculate_food_kbju(item['name'], 100)['calories']
                for item in analysis_result.get('food_items', [])
            )

            await update.message.reply_text(
                f"‚úÖ –ü—Ä–∏–µ–º –ø–∏—â–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                f"‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {total_items}\n"
                f"‚Ä¢ –û–±—â–∏–µ –∫–∞–ª–æ—Ä–∏–∏: {int(total_calories)} –∫–∫–∞–ª\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.",
                reply_markup=remove_keyboard()
            )
            self.user_manager.set_user_state(user_id, 'ready')

        elif '–Ω–µ—Ç, –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é' in message_text.lower():
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –≤—Ä—É—á–Ω—É—é:\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã: –∫—É—Ä–∏—Ü–∞ –≥—Ä–∏–ª—å, –≥—Ä–µ—á–Ω–µ–≤–∞—è –∫–∞—à–∞, —Å–∞–ª–∞—Ç —Ü–µ–∑–∞—Ä—å, —Ä—ã–±–∞ —Å –æ–≤–æ—â–∞–º–∏",
                reply_markup=remove_keyboard()
            )
            self.user_manager.set_user_state(user_id, 'awaiting_food_name')
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:",
                reply_markup=get_confirm_keyboard()
            )

    async def handle_food_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥–∞"""
        user_id = update.effective_user.id
        food_name = update.message.text
        
        if not food_name or len(food_name.strip()) == 0:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞:")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –≤–µ—Å
        self.user_manager.set_user_state(user_id, 'awaiting_manual_weight', {
            'food_name': food_name.strip()
        })
        
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å '{food_name}' –≤ –≥—Ä–∞–º–º–∞—Ö:",
            reply_markup=remove_keyboard()
        )

    async def handle_manual_weight(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤–µ—Å–∞"""
        user_id = update.effective_user.id
        user_data = self.user_manager.get_user_data(user_id)
        
        try:
            weight = float(update.message.text)
            food_name = user_data['food_name']
            
            if weight <= 0 or weight > 5000:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (1-5000 –≥—Ä–∞–º–º):")
                return
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ö–ë–ñ–£
            kbju = self.calculator.calculate_food_kbju(food_name, weight)
            
            response = (
                f"üìä –ö–ë–ñ–£ –¥–ª—è {food_name} ({weight}–≥):\n\n"
                f"‚Ä¢ üçΩÔ∏è –ö–∞–ª–æ—Ä–∏–∏: {kbju['calories']} –∫–∫–∞–ª\n"
                f"‚Ä¢ ü•© –ë–µ–ª–∫–∏: {kbju['protein']}–≥\n"
                f"‚Ä¢ ü•ë –ñ–∏—Ä—ã: {kbju['fat']}–≥\n"
                f"‚Ä¢ üçö –£–≥–ª–µ–≤–æ–¥—ã: {kbju['carbs']}–≥\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏:"
            )
            
            self.user_manager.set_user_state(user_id, 'awaiting_meal_type', {
                'food_name': food_name,
                'weight': weight,
                'kbju': kbju
            })
            
            await update.message.reply_text(response, reply_markup=get_meal_type_keyboard())
            
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö):")

    async def handle_meal_type(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏"""
        user_id = update.effective_user.id
        user_data = self.user_manager.get_user_data(user_id)
        meal_type_text = update.message.text
        
        meal_type_mapping = {
            'üç≥ –∑–∞–≤—Ç—Ä–∞–∫': 'breakfast',
            'üç≤ –æ–±–µ–¥': 'lunch', 
            'üç∞ –ø–µ—Ä–µ–∫—É—Å': 'snack',
            'üçΩÔ∏è —É–∂–∏–Ω': 'dinner'
        }
        
        meal_type_en = meal_type_mapping.get(meal_type_text.lower(), 'other')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        self.db.add_meal(
            user_id=user_id,
            food_name=user_data['food_name'],
            weight_grams=user_data['weight'],
            calories=user_data['kbju']['calories'],
            protein=user_data['kbju']['protein'],
            fat=user_data['kbju']['fat'],
            carbs=user_data['kbju']['carbs'],
            meal_type=meal_type_en
        )
        
        await update.message.reply_text(
            f"‚úÖ {meal_type_text} —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
            "–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.",
            reply_markup=remove_keyboard()
        )
        self.user_manager.set_user_state(user_id, 'ready')

    async def handle_trainer_id(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        try:
            trainer_id = int(update.message.text)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å —Ç—Ä–µ–Ω–µ—Ä-—É—á–µ–Ω–∏–∫
            self.db.add_trainer_trainee(trainer_id, user_id)
            
            await update.message.reply_text(
                "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Ç—Ä–µ–Ω–µ—Ä—É!\n\n"
                "–¢–µ–ø–µ—Ä—å —Ç—Ä–µ–Ω–µ—Ä –±—É–¥–µ—Ç –≤–∏–¥–µ—Ç—å –≤–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∏—Ç–∞–Ω–∏—è.",
                reply_markup=remove_keyboard()
            )
            
            self.user_manager.set_user_state(user_id, 'ready')
            
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç—Ä–µ–Ω–µ—Ä–∞:")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
    ü§ñ *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é FITHUB*

    *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
    /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
    /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è
    /profile - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
    /report - –û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    /reset - –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    /id - –ú–æ–π ID –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞

    *–î–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤:*
    /add_trainee - –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞
    /trainees - –ú–æ–∏ —É—á–µ–Ω–∏–∫–∏

    *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
    1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã üì∏
    2. –ë–æ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –ö–ë–ñ–£
    3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –≤—Ä—É—á–Ω—É—é
    4. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏

    *–î–ª—è —É—á–µ–Ω–∏–∫–æ–≤:*
    –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /id —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à ID –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞

    *–î–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤:*
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_trainee [ID] —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞

    *–ü—Ä–∏–º–µ—Ä—ã –Ω–∞–∑–≤–∞–Ω–∏–π –±–ª—é–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞:*
    ‚Ä¢ –ö—É—Ä–∏—Ü–∞ –≥—Ä–∏–ª—å
    ‚Ä¢ –ì—Ä–µ—á–Ω–µ–≤–∞—è –∫–∞—à–∞  
    ‚Ä¢ –°–∞–ª–∞—Ç —Ü–µ–∑–∞—Ä—å
    ‚Ä¢ –†—ã–±–∞ —Å –æ–≤–æ—â–∞–º–∏
    ‚Ä¢ –¢–≤–æ—Ä–æ–≥ —Å —Ñ—Ä—É–∫—Ç–∞–º–∏
    """
        await update.message.reply_text(help_text, parse_mode='Markdown')

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats"""
        user_id = update.effective_user.id
        today = datetime.now().strftime('%Y-%m-%d')

        meals = self.db.get_daily_intake(user_id, today)

        if not meals:
            await update.message.reply_text("üìä –ó–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø–∏—Ç–∞–Ω–∏–∏.")
            return

        total_calories = sum(meal['calories'] for meal in meals)
        total_protein = sum(meal['protein'] for meal in meals)
        total_fat = sum(meal['fat'] for meal in meals)
        total_carbs = sum(meal['carbs'] for meal in meals)

        # –ü–æ–ª—É—á–∞–µ–º –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = self.db.get_user(user_id)
        daily_calories = user_data.get('daily_calories', 2000) if user_data else 2000

        progress = min(100, int((total_calories / daily_calories) * 100))

        stats_text = f"""
    üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è*

    *–ü—Ä–∏–µ–º—ã –ø–∏—â–∏:* {len(meals)}
    *–°—ä–µ–¥–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π:* {total_calories} / {daily_calories} –∫–∫–∞–ª
    *–ü—Ä–æ–≥—Ä–µ—Å—Å:* {progress}%

    *–ë–ñ–£ –∑–∞ –¥–µ–Ω—å:*
    ‚Ä¢ ü•© –ë–µ–ª–∫–∏: {total_protein}–≥
    ‚Ä¢ ü•ë –ñ–∏—Ä—ã: {total_fat}–≥  
    ‚Ä¢ üçö –£–≥–ª–µ–≤–æ–¥—ã: {total_carbs}–≥

    *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–∏–µ–º—ã –ø–∏—â–∏:*
    """

        for meal in meals[-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø—Ä–∏–µ–º–∞
            time = meal['created_at'].strftime('%H:%M') if meal['created_at'] else '--:--'
            stats_text += f"‚Ä¢ {meal['food_name']} - {meal['calories']} –∫–∫–∞–ª ({time})\n"

        await update.message.reply_text(stats_text, parse_mode='Markdown')

    async def profile_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /profile"""
        user_id = update.effective_user.id
        user_data = self.db.get_user(user_id)

        if not user_data:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
            return

        profile_text = f"""
    üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*

    *–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:*
    ‚Ä¢ –†–æ—Å—Ç: {user_data.get('height', '–ù–µ —É–∫–∞–∑–∞–Ω')} —Å–º
    ‚Ä¢ –í–µ—Å: {user_data.get('weight', '–ù–µ —É–∫–∞–∑–∞–Ω')} –∫–≥
    ‚Ä¢ –¢–∏–ø: {'üèãÔ∏è –¢—Ä–µ–Ω–µ—Ä' if user_data.get('user_type') == 'trainer' else 'üßë‚Äçüéì –£—á–µ–Ω–∏–∫'}

    *–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –Ω–æ—Ä–º–∞:*
    ‚Ä¢ üçΩÔ∏è –ö–∞–ª–æ—Ä–∏–∏: {user_data.get('daily_calories', '–ù–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ')} –∫–∫–∞–ª/–¥–µ–Ω—å
    """

        if user_data.get('user_type') == 'trainee' and user_data.get('trainer_id'):
            profile_text += f"‚Ä¢ –¢—Ä–µ–Ω–µ—Ä: ID {user_data.get('trainer_id')}"

        await update.message.reply_text(profile_text, parse_mode='Markdown')

    async def report_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /report"""
        user_id = update.effective_user.id
        today = datetime.now().strftime('%Y-%m-%d')

        meals = self.db.get_daily_intake(user_id, today)

        if not meals:
            await update.message.reply_text("üìù –ó–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø–∏—Ç–∞–Ω–∏–∏.")
            return

        total_calories = sum(meal['calories'] for meal in meals)
        total_protein = sum(meal['protein'] for meal in meals)
        total_fat = sum(meal['fat'] for meal in meals)
        total_carbs = sum(meal['carbs'] for meal in meals)

        report_text = f"""
    üìà *–û—Ç—á–µ—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é –∑–∞ {today}*

    *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
    ‚Ä¢ –ü—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: {len(meals)}
    ‚Ä¢ –û–±—â–∏–µ –∫–∞–ª–æ—Ä–∏–∏: {total_calories} –∫–∫–∞–ª
    ‚Ä¢ –ë–µ–ª–∫–∏: {total_protein}–≥
    ‚Ä¢ –ñ–∏—Ä—ã: {total_fat}–≥
    ‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {total_carbs}–≥

    *–î–µ—Ç–∞–ª–∏ –ø–æ –ø—Ä–∏–µ–º–∞–º –ø–∏—â–∏:*
    """

        for i, meal in enumerate(meals, 1):
            time = meal['created_at'].strftime('%H:%M') if meal['created_at'] else '--:--'
            report_text += f"""
    {i}. *{meal['food_name']}* ({meal['weight_grams']}–≥)
       üçΩÔ∏è {meal['calories']} –∫–∫–∞–ª | ü•© {meal['protein']}–≥ | ü•ë {meal['fat']}–≥ | üçö {meal['carbs']}–≥
       ‚è∞ {time}
    """

        await update.message.reply_text(report_text, parse_mode='Markdown')

    async def reset_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /reset - —Å–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        user_id = update.effective_user.id
        today = datetime.now().strftime('%Y-%m-%d')

        try:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ –ø–∏—Ç–∞–Ω–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            with self.db.conn.cursor() as cur:
                cur.execute(
                    'DELETE FROM meals WHERE user_id = %s AND DATE(created_at) = %s',
                    (user_id, today)
                )
                self.db.conn.commit()

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.user_manager.set_user_state(user_id, 'ready')

            await update.message.reply_text(
                "‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è —Å–±—Ä–æ—à–µ–Ω–∞!\n\n"
                "–í—Å–µ –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏ —É–¥–∞–ª–µ–Ω—ã. "
                "–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è –∑–∞–Ω–æ–≤–æ.",
                reply_markup=remove_keyboard()
            )

        except Exception as e:
            logger.error(f"Reset error: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def id_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /id - –ø–æ–∫–∞–∑–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id

        await update.message.reply_text(
            f"üÜî *–í–∞—à ID:* `{user_id}`\n\n"
            "–ü–µ—Ä–µ–¥–∞–π—Ç–µ —ç—Ç–æ—Ç ID –≤–∞—à–µ–º—É —Ç—Ä–µ–Ω–µ—Ä—É, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –≤–∏–¥–µ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∏—Ç–∞–Ω–∏—è.\n\n"
            "*–¢—Ä–µ–Ω–µ—Ä –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –∫–æ–º–∞–Ω–¥–æ–π:*\n"
            "`/add_trainee –≤–∞—à_id`",
            parse_mode='Markdown'
        )

    async def add_trainee_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /add_trainee - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–º"""
        user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ç—Ä–µ–Ω–µ—Ä
        user_data = self.db.get_user(user_id)
        if not user_data or user_data.get('user_type') != 'trainer':
            await update.message.reply_text(
                "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä–∞–º.\n\n"
                "–ï—Å–ª–∏ –≤—ã —Ç—Ä–µ–Ω–µ—Ä, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–∞–∫ —Ç—Ä–µ–Ω–µ—Ä —á–µ—Ä–µ–∑ /start"
            )
            return

        if not context.args:
            await update.message.reply_text(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID —É—á–µ–Ω–∏–∫–∞.\n\n"
                "–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n"
                "`/add_trainee 123456789`\n\n"
                "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /id —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ ID",
                parse_mode='Markdown'
            )
            return

        try:
            trainee_id = int(context.args[0])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—á–µ–Ω–∏–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            trainee_data = self.db.get_user(trainee_id)
            if not trainee_data:
                await update.message.reply_text(
                    "‚ùå –£—á–µ–Ω–∏–∫ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.\n\n"
                    "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start"
                )
                return

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å —Ç—Ä–µ–Ω–µ—Ä-—É—á–µ–Ω–∏–∫
            self.db.add_trainer_trainee(user_id, trainee_id)

            await update.message.reply_text(
                f"‚úÖ –£—á–µ–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"*ID —É—á–µ–Ω–∏–∫–∞:* {trainee_id}\n"
                f"*–ò–º—è:* {trainee_data.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç—á–µ—Ç—ã –æ –µ–≥–æ –ø–∏—Ç–∞–Ω–∏–∏."
            )

        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.\n\n"
                "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä:\n"
                "`/add_trainee 123456789`",
                parse_mode='Markdown'
            )

    async def trainees_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /trainees - —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ —Ç—Ä–µ–Ω–µ—Ä–∞"""
        user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ç—Ä–µ–Ω–µ—Ä
        user_data = self.db.get_user(user_id)
        if not user_data or user_data.get('user_type') != 'trainer':
            await update.message.reply_text(
                "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–µ—Ä–∞–º."
            )
            return

        try:
            trainees = self.db.get_trainees(user_id)

            if not trainees:
                await update.message.reply_text(
                    "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤.\n\n"
                    "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞:\n"
                    "1. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /id\n"
                    "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_trainee [ID]"
                )
                return

            trainees_text = "üë• *–í–∞—à–∏ —É—á–µ–Ω–∏–∫–∏:*\n\n"

            for trainee in trainees:
                today = datetime.now().strftime('%Y-%m-%d')
                trainee_meals = self.db.get_daily_intake(trainee['id'], today)
                total_calories = sum(meal['calories'] for meal in trainee_meals)

                trainees_text += (
                    f"*{trainee.get('first_name', '–£—á–µ–Ω–∏–∫')}* (ID: `{trainee['id']}`)\n"
                    f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–π —Å–µ–≥–æ–¥–Ω—è: {total_calories} –∫–∫–∞–ª\n"
                    f"‚Ä¢ –ü—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: {len(trainee_meals)}\n\n"
                )

            await update.message.reply_text(trainees_text, parse_mode='Markdown')

        except Exception as e:
            logger.error(f"Trainees command error: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–µ–Ω–∏–∫–æ–≤."
            )

    async def daily_summary(self, context: ContextTypes.DEFAULT_TYPE):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é"""
        pass

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        application = Application.builder().token(Config.BOT_TOKEN).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("stats", self.stats_command))
        application.add_handler(CommandHandler("profile", self.profile_command))
        application.add_handler(CommandHandler("report", self.report_command))
        application.add_handler(CommandHandler("reset", self.reset_command))
        application.add_handler(CommandHandler("id", self.id_command))
        application.add_handler(CommandHandler("add_trainee", self.add_trainee_command))
        application.add_handler(CommandHandler("trainees", self.trainees_command))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling()

if __name__ == '__main__':
    bot = FithubBot()
    bot.run()
