import os
import logging
from telegram.ext import Application

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
    TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not TELEGRAM_BOT_TOKEN:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –°–æ–∑–¥–∞–µ–º Application —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # [–í–ê–® –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –ö–û–î –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò...]
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ—Ç–∏–≤ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        application.run_polling(
            allowed_updates=['message', 'callback_query'],
            drop_pending_updates=True  # –í–∞–∂–Ω–æ: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        
if __name__ == '__main__':
    main()

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
from database import db
from usda_database import usda_db
from nutrition_calculator import nutrition_calc
from vision_analyzer import vision_analyzer

logger.info("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(
    CHOOSING_ROLE, TRAINEE_SETUP, TRAINEE_GOAL, TRAINEE_ACTIVITY,
    AWAITING_PHOTO, CONFIRM_FOOD, MEAL_TYPE_SELECTION,
    LINK_TRAINER, MANUAL_FOOD_INPUT, FOOD_QUANTITY
) = range(10)

# üìã –ö–õ–ê–í–ò–ê–¢–£–†–´ –° –†–ê–ë–û–¢–ê–Æ–©–ò–ú–ò –ö–ù–û–ü–ö–ê–ú–ò

def get_role_keyboard():
    return ReplyKeyboardMarkup([['üë®‚Äçüéì –£—á–µ–Ω–∏–∫', 'üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä']], 
                              resize_keyboard=True, one_time_keyboard=True)

def get_gender_keyboard():
    return ReplyKeyboardMarkup([['üë® –ú—É–∂—Å–∫–æ–π', 'üë© –ñ–µ–Ω—Å–∫–∏–π']],
                              resize_keyboard=True, one_time_keyboard=True)

def get_goal_keyboard():
    return ReplyKeyboardMarkup([
        ['üìâ –ü–æ—Ö—É–¥–µ–Ω–∏–µ', 'üìà –ù–∞–±–æ—Ä –º–∞—Å—Å—ã'],
        ['‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã']
    ], resize_keyboard=True, one_time_keyboard=True)

def get_activity_keyboard():
    return ReplyKeyboardMarkup([
        ['üí§ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è', 'üö∂‚Äç‚ôÇÔ∏è –ù–∏–∑–∫–∞—è'],
        ['üèÉ‚Äç‚ôÇÔ∏è –°—Ä–µ–¥–Ω—è—è', 'üî• –í—ã—Å–æ–∫–∞—è'],
        ['üèãÔ∏è‚Äç‚ôÇÔ∏è –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è']
    ], resize_keyboard=True, one_time_keyboard=True)

def get_confirm_keyboard():
    return ReplyKeyboardMarkup([
        ['‚úÖ –î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ'], 
        ['‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞–º–º–æ–≤–∫—É', 'üîÑ –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é']
    ], resize_keyboard=True, one_time_keyboard=True)

def get_meal_type_keyboard():
    return ReplyKeyboardMarkup([
        ['üç≥ –ó–∞–≤—Ç—Ä–∞–∫', 'üç≤ –û–±–µ–¥'],
        ['üçΩÔ∏è –£–∂–∏–Ω', 'üçé –ü–µ—Ä–µ–∫—É—Å']
    ], resize_keyboard=True, one_time_keyboard=True)

def get_main_menu_trainee():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —É—á–µ–Ω–∏–∫–∞ - –í–°–ï –ö–ù–û–ü–ö–ò –†–ê–ë–û–¢–ê–Æ–¢"""
    return ReplyKeyboardMarkup([
        ['üì∑ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å –µ–¥—É', 'üìù –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç'],
        ['üìä –ò—Ç–æ–≥–∏ –∑–∞ –¥–µ–Ω—å', 'üçΩÔ∏è –ú–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏'],
        ['üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', 'üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞']
    ], resize_keyboard=True)

def get_main_menu_trainer():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞"""
    return ReplyKeyboardMarkup([
        ['üë• –ú–æ–∏ —É—á–µ–Ω–∏–∫–∏', 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
        ['üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å']
    ], resize_keyboard=True)

def get_correction_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –≥—Ä–∞–º–º–æ–≤–∫–∏"""
    return ReplyKeyboardMarkup([
        ['‚ûï –£–≤–µ–ª–∏—á–∏—Ç—å –≤–µ—Å', '‚ûñ –£–º–µ–Ω—å—à–∏—Ç—å –≤–µ—Å'],
        ['‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', 'üîÑ –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é']
    ], resize_keyboard=True, one_time_keyboard=True)

# üéØ –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"""
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    existing_user = db.get_user(user.id)
    if existing_user:
        role = existing_user[3]
        menu = get_main_menu_trainee() if role == 'trainee' else get_main_menu_trainer()
        await update.message.reply_text(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}! üéâ\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=menu
        )
        return ConversationHandler.END
    
    # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    await update.message.reply_text(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FITHUB\n\n"
        "–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ä–æ–ª—å:",
        reply_markup=get_role_keyboard()
    )
    return CHOOSING_ROLE

# üéì –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –£–ß–ï–ù–ò–ö–ê
async def handle_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    text = update.message.text
    user = update.effective_user
    
    if '–£—á–µ–Ω–∏–∫' in text:
        context.user_data.update({
            'user_id': user.id,
            'username': user.username,
            'first_name': user.first_name,
            'role': 'trainee'
        })
        
        await update.message.reply_text(
            "üéì –û—Ç–ª–∏—á–Ω–æ! –¢—ã - —É—á–µ–Ω–∏–∫!\n"
            "–î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.\n\n"
            "–í–≤–µ–¥–∏ —Å–≤–æ–π —Ä–æ—Å—Ç (–≤ —Å–º):",
            reply_markup=ReplyKeyboardRemove()
        )
        return TRAINEE_SETUP
    
    elif '–¢—Ä–µ–Ω–µ—Ä' in text:
        db.add_user((
            user.id, user.username, user.first_name, 'trainer',
            None, None, None, None, None, 1.375, None, None, None, None, None
        ))
        
        await update.message.reply_text(
            f"üë®‚Äçüè´ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ç—Ä–µ–Ω–µ—Ä!\n\n"
            f"üÜî –í–∞—à ID –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–æ–≤: <code>{user.id}</code>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç ID —Å–≤–æ–∏–º —É—á–µ–Ω–∏–∫–∞–º –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏.",
            parse_mode='HTML',
            reply_markup=get_main_menu_trainer()
        )
        return ConversationHandler.END

async def setup_trainee(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è —É—á–µ–Ω–∏–∫–∞"""
    text = update.message.text
    user_data = context.user_data
    
    try:
        if 'height' not in user_data:
            height = float(text)
            user_data['height'] = height
            await update.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–µ—Å (–≤ –∫–≥):")
            return TRAINEE_SETUP
        
        elif 'weight' not in user_data:
            weight = float(text)
            user_data['weight'] = weight
            await update.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")
            return TRAINEE_SETUP
        
        elif 'age' not in user_data:
            age = int(text)
            user_data['age'] = age
            await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=get_gender_keyboard())
            return TRAINEE_SETUP
        
        elif 'gender' not in user_data:
            if '–ú—É–∂—Å–∫–æ–π' in text:
                user_data['gender'] = 'male'
            elif '–ñ–µ–Ω—Å–∫–∏–π' in text:
                user_data['gender'] = 'female'
            else:
                await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø–æ–ª –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
                return TRAINEE_SETUP
            
            await update.message.reply_text("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=get_activity_keyboard())
            return TRAINEE_ACTIVITY
    
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        return TRAINEE_SETUP

async def handle_activity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    text = update.message.text
    user_data = context.user_data
    
    activity_map = {
        'üí§ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è': 1.2, 'üö∂‚Äç‚ôÇÔ∏è –ù–∏–∑–∫–∞—è': 1.375,
        'üèÉ‚Äç‚ôÇÔ∏è –°—Ä–µ–¥–Ω—è—è': 1.55, 'üî• –í—ã—Å–æ–∫–∞—è': 1.725,
        'üèãÔ∏è‚Äç‚ôÇÔ∏è –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è': 1.9
    }
    
    if text in activity_map:
        user_data['activity_level'] = activity_map[text]
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ü–µ–ª—å:", reply_markup=get_goal_keyboard())
        return TRAINEE_GOAL
    
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
    return TRAINEE_ACTIVITY

async def handle_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—á–µ–Ω–∏–∫–∞"""
    text = update.message.text
    user_data = context.user_data
    
    goal_map = {
        'üìâ –ü–æ—Ö—É–¥–µ–Ω–∏–µ': 'lose', 'üìà –ù–∞–±–æ—Ä –º–∞—Å—Å—ã': 'gain', 
        '‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã': 'maintain'
    }
    
    if text in goal_map:
        user_data['goal'] = goal_map[text]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ö–ë–ñ–£
        bmr = nutrition_calc.calculate_bmr(
            user_data['weight'], user_data['height'], 
            user_data['age'], user_data['gender']
        )
        
        daily_calories = nutrition_calc.calculate_daily_calories(
            bmr, user_data['goal'], user_data['activity_level']
        )
        
        macros = nutrition_calc.calculate_macros(daily_calories, user_data['goal'])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.add_user((
            user_data['user_id'], user_data['username'], user_data['first_name'], 'trainee',
            user_data['height'], user_data['weight'], user_data['age'], user_data['gender'],
            user_data['goal'], user_data['activity_level'], daily_calories,
            macros['protein_grams'], macros['fat_grams'], macros['carbs_grams'], None
        ))
        
        await update.message.reply_text(
            f"üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"üìä –¢–≤–æ–∏ –¥–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã:\n"
            f"‚Ä¢ üî• {daily_calories:.0f} –∫–∫–∞–ª\n"
            f"‚Ä¢ üí™ {macros['protein_grams']:.1f} –≥ –±–µ–ª–∫–∞\n"
            f"‚Ä¢ ü•ë {macros['fat_grams']:.1f} –≥ –∂–∏—Ä–æ–≤\n"
            f"‚Ä¢ üçö {macros['carbs_grams']:.1f} –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤\n\n"
            "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ!",
            reply_markup=get_main_menu_trainee()
        )
        return ConversationHandler.END
    
    await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ü–µ–ª—å –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
    return TRAINEE_GOAL

# üì∑ –ê–ù–ê–õ–ò–ó –§–û–¢–û –ï–î–´
async def handle_photo_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å –µ–¥—É'"""
    await update.message.reply_text(
        "üì∑ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –≤–∞—à–µ –±–ª—é–¥–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.\n\n"
        "–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ–≥–æ –∏ –æ–ø—Ä–µ–¥–µ–ª—é:\n"
        "‚Ä¢ üçΩÔ∏è –í–∏–¥ –±–ª—é–¥–∞\n‚Ä¢ ‚öñÔ∏è –ì—Ä–∞m–º–æ–≤–∫—É\n‚Ä¢ üìä –ö–ë–ñ–£",
        reply_markup=ReplyKeyboardRemove()
    )
    return AWAITING_PHOTO

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
    user_id = update.effective_user.id
    user = db.get_user(user_id)
    
    if not user or user[3] != 'trainee':
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start")
        return ConversationHandler.END
    
    await update.message.reply_text(
        "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ...",
        reply_markup=ReplyKeyboardRemove()
    )
    
    try:
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é
        # –°–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–∞–Ω–∞–ª–∏–∑
        analysis_result = vision_analyzer.analyze_image(b'')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        context.user_data['analysis_result'] = analysis_result
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        message = f"üçΩÔ∏è <b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –±–ª—é–¥–æ: {analysis_result['dish_name']}</b>\n\n"
        message += "üìã <b>–°–æ—Å—Ç–∞–≤:</b>\n"
        
        for i, ingredient in enumerate(analysis_result['ingredients'], 1):
            nutrition = usda_db.calculate_nutrition(ingredient['name'], ingredient['weight'])
            message += (
                f"{i}. <b>{ingredient['name'].title()}</b>\n"
                f"   ‚öñÔ∏è {ingredient['weight']}–≥ | "
                f"üî• {ingredient['calories']:.0f}–∫–∫–∞–ª | "
                f"üí™{ingredient['protein']:.1f}–≥ ü•ë{ingredient['fat']:.1f}–≥ üçö{ingredient['carbs']:.1f}–≥\n"
            )
        
        message += f"\nüìä <b>–ò—Ç–æ–≥–æ –∑–∞ –±–ª—é–¥–æ:</b>\n"
        message += f"‚Ä¢ ‚öñÔ∏è –û–±—â–∏–π –≤–µ—Å: {analysis_result['total_weight']}–≥\n"
        message += f"‚Ä¢ üî• –ö–∞–ª–æ—Ä–∏–∏: {analysis_result['total_calories']:.0f} –∫–∫–∞–ª\n"
        message += f"‚Ä¢ üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analysis_result['confidence']:.0%}\n\n"
        message += "–í–µ—Ä–Ω–æ –ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –±–ª—é–¥–æ –∏ –≥—Ä–∞–º–º–æ–≤–∫–∞?"
        
        await update.message.reply_text(
            message,
            parse_mode='HTML',
            reply_markup=get_confirm_keyboard()
        )
        return CONFIRM_FOOD
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤—Ä—É—á–Ω—É—é.",
            reply_markup=get_main_menu_trainee()
        )
        return ConversationHandler.END

async def confirm_food_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
    text = update.message.text
    analysis_result = context.user_data.get('analysis_result')
    
    if not analysis_result:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return ConversationHandler.END
    
    if text == '‚úÖ –î–∞, –≤—Å–µ –≤–µ—Ä–Ω–æ':
        context.user_data['confirmed_food'] = analysis_result
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏:",
            reply_markup=get_meal_type_keyboard()
        )
        return MEAL_TYPE_SELECTION
    
    elif text == '‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞–º–º–æ–≤–∫—É':
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –æ–±—â–∏–π –≤–µ—Å –±–ª—é–¥–∞ –≤ –≥—Ä–∞–º–º–∞—Ö:",
            reply_markup=ReplyKeyboardRemove()
        )
        return CONFIRM_FOOD
    
    elif text == 'üîÑ –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é':
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞:",
            reply_markup=ReplyKeyboardRemove()
        )
        return MANUAL_FOOD_INPUT

async def handle_meal_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–µ–º–µ –ø–∏—â–∏"""
    text = update.message.text
    user_id = update.effective_user.id
    confirmed_food = context.user_data.get('confirmed_food')
    
    if not confirmed_food:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ –µ–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return ConversationHandler.END
    
    meal_map = {
        'üç≥ –ó–∞–≤—Ç—Ä–∞–∫': 'breakfast', 'üç≤ –û–±–µ–¥': 'lunch',
        'üçΩÔ∏è –£–∂–∏–Ω': 'dinner', 'üçé –ü–µ—Ä–µ–∫—É—Å': 'snack'
    }
    
    meal_type = meal_map.get(text, 'other')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç
    for ingredient in confirmed_food['ingredients']:
        db.add_food_entry(
            user_id,
            ingredient['name'],
            ingredient['weight'],
            ingredient['calories'],
            ingredient['protein'],
            ingredient['fat'],
            ingredient['carbs'],
            meal_type
        )
    
    await update.message.reply_text(
        f"‚úÖ <b>–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–∞–∫ {text.lower()}!</b>\n\n"
        f"üçΩÔ∏è {confirmed_food['dish_name']}\n"
        f"‚öñÔ∏è {confirmed_food['total_weight']}–≥\n"
        f"üî• {confirmed_food['total_calories']:.0f} –∫–∫–∞–ª\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ! üìä",
        parse_mode='HTML',
        reply_markup=get_main_menu_trainee()
    )
    return ConversationHandler.END

# üìù –†–£–ß–ù–û–ô –í–í–û–î –ü–†–û–î–£–ö–¢–ê
async def handle_manual_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç'"""
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:",
        reply_markup=ReplyKeyboardRemove()
    )
    return MANUAL_FOOD_INPUT

async def process_food_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
    food_name = update.message.text
    context.user_data['manual_food_name'] = food_name
    
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø–æ—Ä—Ü–∏–∏ –≤ –≥—Ä–∞–º–º–∞—Ö:")
    return FOOD_QUANTITY

async def process_food_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Å–∞ –ø–æ—Ä—Ü–∏–∏"""
    text = update.message.text
    food_name = context.user_data.get('manual_food_name')
    
    try:
        quantity = float(text)
        nutrition = usda_db.calculate_nutrition(food_name, quantity)
        
        context.user_data['manual_food_nutrition'] = nutrition
        
        message = (
            f"üçé <b>{nutrition['name']}</b>\n"
            f"‚öñÔ∏è {nutrition['weight_grams']}–≥\n"
            f"üî• {nutrition['calories']:.0f} –∫–∫–∞–ª\n"
            f"üí™ {nutrition['protein']:.1f}–≥ –±–µ–ª–∫–∞\n"
            f"ü•ë {nutrition['fat']:.1f}–≥ –∂–∏—Ä–æ–≤\n"
            f"üçö {nutrition['carbs']:.1f}–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤\n\n"
            "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏:"
        )
        
        await update.message.reply_text(
            message,
            parse_mode='HTML',
            reply_markup=get_meal_type_keyboard()
        )
        return MEAL_TYPE_SELECTION
        
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –≤–µ—Å–∞:")
        return FOOD_QUANTITY

# üìä –ö–û–ú–ê–ù–î–´ –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ (–†–ê–ë–û–¢–ê–Æ–¢ –ü–û –ö–ù–û–ü–ö–ê–ú)

async def show_daily_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –∏—Ç–æ–≥–æ–≤ –∑–∞ –¥–µ–Ω—å - —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É"""
    user_id = update.effective_user.id
    user = db.get_user(user_id)
    
    if not user:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return
    
    calories, protein, fat, carbs = db.get_daily_summary(user_id)
    goal_calories = user[10] or 2000
    
    message = (
        f"üìä <b>–ò—Ç–æ–≥–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è</b>\n\n"
        f"üî• –ö–∞–ª–æ—Ä–∏–∏: {calories:.0f} / {goal_calories:.0f}\n"
        f"üí™ –ë–µ–ª–∫–∏: {protein:.1f}–≥\n"
        f"ü•ë –ñ–∏—Ä—ã: {fat:.1f}–≥\n"
        f"üçö –£–≥–ª–µ–≤–æ–¥—ã: {carbs:.1f}–≥\n\n"
    )
    
    percentage = (calories / goal_calories * 100) if goal_calories > 0 else 0
    if percentage >= 100:
        message += "üéØ <b>–î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!</b> üéâ"
    elif percentage >= 80:
        message += "üí™ <b>–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å!</b> –ü–æ—á—Ç–∏ —É —Ü–µ–ª–∏!"
    else:
        message += "üìà <b>–•–æ—Ä–æ—à–µ–µ –Ω–∞—á–∞–ª–æ!</b> –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
    
    await update.message.reply_text(message, parse_mode='HTML')

async def show_recommendations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π - —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É"""
    user_id = update.effective_user.id
    user = db.get_user(user_id)
    
    if not user or user[3] != 'trainee':
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤")
        return
    
    daily_calories = user[10] or 2000
    protein_goal = user[11] or 150
    fat_goal = user[12] or 70
    carb_goal = user[13] or 250
    
    message = (
        f"üçΩÔ∏è <b>–í–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</b>\n\n"
        f"üìä <b>–î–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã:</b>\n"
        f"‚Ä¢ üî• {daily_calories:.0f} –∫–∫–∞–ª\n"
        f"‚Ä¢ üí™ {protein_goal:.1f}–≥ –±–µ–ª–∫–∞\n"
        f"‚Ä¢ ü•ë {fat_goal:.1f}–≥ –∂–∏—Ä–æ–≤\n"
        f"‚Ä¢ üçö {carb_goal:.1f}–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤\n\n"
        f"‚è∞ <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
        f"‚Ä¢ üç≥ –ó–∞–≤—Ç—Ä–∞–∫: 8:00\n"
        f"‚Ä¢ üç≤ –û–±–µ–¥: 13:00\n"
        f"‚Ä¢ üçΩÔ∏è –£–∂–∏–Ω: 19:00\n"
        f"‚Ä¢ üçé –ü–µ—Ä–µ–∫—É—Å: 16:00\n\n"
        f"üí° <b>–°–æ–≤–µ—Ç—ã:</b>\n"
        f"‚Ä¢ –ü–µ–π—Ç–µË∂≥Â§ü –≤–æ–¥—ã\n"
        f"‚Ä¢ –ï—à—å—Ç–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã\n"
        f"‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –±–∞–ª–∞–Ω—Å–æ–º –ö–ë–ñ–£"
    )
    
    await update.message.reply_text(message, parse_mode='HTML')

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è - —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É"""
    user_id = update.effective_user.id
    user = db.get_user(user_id)
    
    if not user:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return
    
    role = user[3]
    
    if role == 'trainee':
        message = (
            f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"üìè –†–æ—Å—Ç: {user[4]} —Å–º\n"
            f"‚öñÔ∏è –í–µ—Å: {user[5]} –∫–≥\n"
            f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user[6]} –ª–µ—Ç\n"
            f"üë´ –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if user[7] == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'}\n"
            f"üéØ –¶–µ–ª—å: {get_goal_text(user[8])}\n"
            f"üî• –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞: {user[10]:.0f} –∫–∫–∞–ª"
        )
    else:
        message = (
            f"üë®‚Äçüè´ <b>–ü—Ä–æ—Ñ–∏–ª—å —Ç—Ä–µ–Ω–µ—Ä–∞</b>\n\n"
            f"üÜî –í–∞—à ID: <code>{user_id}</code>\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç ID —É—á–µ–Ω–∏–∫–∞–º –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
        )
    
    await update.message.reply_text(message, parse_mode='HTML')

def get_goal_text(goal):
    goals = {'lose': '–ü–æ—Ö—É–¥–µ–Ω–∏–µ', 'gain': '–ù–∞–±–æ—Ä –º–∞—Å—Å—ã', 'maintain': '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã'}
    return goals.get(goal, '–ù–µ —É–∫–∞–∑–∞–Ω–∞')

# üîó –ü–†–ò–í–Ø–ó–ö–ê –¢–†–ï–ù–ï–†–ê
async def link_trainer_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–∏–≤—è–∑–∫–∏ —Ç—Ä–µ–Ω–µ—Ä–∞ - —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É"""
    user_id = update.effective_user.id
    user = db.get_user(user_id)
    
    if not user or user[3] != 'trainee':
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤")
        return
    
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ ID —Ç—Ä–µ–Ω–µ—Ä–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏:",
        reply_markup=ReplyKeyboardRemove()
    )
    return LINK_TRAINER

async def process_trainer_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID —Ç—Ä–µ–Ω–µ—Ä–∞"""
    user_id = update.effective_user.id
    text = update.message.text
    
    try:
        trainer_id = int(text)
        trainer = db.get_user(trainer_id)
        
        if trainer and trainer[3] == 'trainer':
            db.link_trainer_trainee(trainer_id, user_id)
            await update.message.reply_text(
                f"‚úÖ –í—ã –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Ç—Ä–µ–Ω–µ—Ä—É {trainer[2]}!",
                reply_markup=get_main_menu_trainee()
            )
        else:
            await update.message.reply_text(
                "‚ùå –¢—Ä–µ–Ω–µ—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=get_main_menu_trainee()
            )
        
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)")
        return LINK_TRAINER
    
    return ConversationHandler.END

# üë• –ö–û–ú–ê–ù–î–´ –î–õ–Ø –¢–†–ï–ù–ï–†–û–í
async def show_trainees(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —É—á–µ–Ω–∏–∫–æ–≤ —Ç—Ä–µ–Ω–µ—Ä–∞ - —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É"""
    user_id = update.effective_user.id
    user = db.get_user(user_id)
    
    if not user or user[3] != 'trainer':
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤")
        return
    
    trainees = db.get_trainees(user_id)
    
    if not trainees:
        await update.message.reply_text(
            "üë• –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤.\n\n"
            "–í–∞—à ID –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n"
            f"<code>{user_id}</code>",
            parse_mode='HTML'
        )
        return
    
    message = "üë• <b>–í–∞—à–∏ —É—á–µ–Ω–∏–∫–∏:</b>\n\n"
    for trainee in trainees:
        calories, protein, fat, carbs = db.get_daily_summary(trainee[0])
        message += f"üë§ {trainee[2]}\nüî• {calories:.0f} –∫–∫–∞–ª —Å–µ–≥–æ–¥–Ω—è\n\n"
    
    await update.message.reply_text(message, parse_mode='HTML')

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    user = db.get_user(update.effective_user.id)
    menu = get_main_menu_trainee() if user and user[3] == 'trainee' else get_main_menu_trainer()
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=menu)
    return ConversationHandler.END

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –í–°–ï–ú–ò –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∫–Ω–æ–ø–æ–∫"""
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # üìù –û–°–ù–û–í–ù–´–ï –î–ò–ê–õ–û–ì–ò
    setup_conv = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOOSING_ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_role)],
            TRAINEE_SETUP: [MessageHandler(filters.TEXT & ~filters.COMMAND, setup_trainee)],
            TRAINEE_ACTIVITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_activity)],
            TRAINEE_GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_goal)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    photo_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^üì∑ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å –µ–¥—É$'), handle_photo_message)],
        states={
            AWAITING_PHOTO: [MessageHandler(filters.PHOTO, handle_photo)],
            CONFIRM_FOOD: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_food_analysis)],
            MEAL_TYPE_SELECTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_meal_type)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    manual_food_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^üìù –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç$'), handle_manual_input)],
        states={
            MANUAL_FOOD_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_food_name)],
            FOOD_QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_food_quantity)],
            MEAL_TYPE_SELECTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_meal_type)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    link_trainer_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞$'), link_trainer_start)],
        states={
            LINK_TRAINER: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_trainer_link)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    # üéØ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ
    application.add_handler(MessageHandler(filters.Regex('^üìä –ò—Ç–æ–≥–∏ –∑–∞ –¥–µ–Ω—å$'), show_daily_summary))
    application.add_handler(MessageHandler(filters.Regex('^üçΩÔ∏è –ú–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏$'), show_recommendations))
    application.add_handler(MessageHandler(filters.Regex('^üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å$'), show_profile))
    application.add_handler(MessageHandler(filters.Regex('^üë• –ú–æ–∏ —É—á–µ–Ω–∏–∫–∏$'), show_trainees))
    
    # üìù –î–û–ë–ê–í–õ–Ø–ï–ú –í–°–ï –ö–û–ù–í–ï–†–°–ê–¶–ò–ò
    application.add_handler(setup_conv)
    application.add_handler(photo_conv)
    application.add_handler(manual_food_conv)
    application.add_handler(link_trainer_conv)
    
    # üì∑ –û–ë–†–ê–ë–û–¢–ö–ê –§–û–¢–û –ò–ó –õ–Æ–ë–û–ì–û –ú–ï–°–¢–ê
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å —Ä–∞–±–æ—Ç–∞—é—â–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏!")
    application.run_polling()

if __name__ == '__main__':
    main()
