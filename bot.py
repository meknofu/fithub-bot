import os
import logging
import datetime
from telegram import (
    Update, 
    ReplyKeyboardMarkup, 
    ReplyKeyboardRemove
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ü–ï–†–í–´–ú –¥–µ–ª–æ–º
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

logger.info("üöÄ –ó–∞–ø—É—Å–∫ Fithub Bot...")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ —Å graceful degradation
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

if not TELEGRAM_BOT_TOKEN:
    logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    logger.info("üí° –î–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN –≤ Railway Variables")
    logger.info("üí° –ò–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ .env —Ñ–∞–π–ª –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    # –í–º–µ—Å—Ç–æ –ø–∞–¥–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-—Ä–µ–∂–∏–º
    TELEGRAM_BOT_TOKEN = "demo_mode"
    logger.warning("‚ö†Ô∏è –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –±–µ–∑ Telegram")

# –ò–º–ø–æ—Ä—Ç—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    from database import db
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    class DatabaseStub:
        def get_connection(self): pass
        def init_db(self): pass
        def add_user(self, *args): pass
        def get_user(self, *args): return None
        def add_food_entry(self, *args): pass
        def get_daily_summary(self, *args): return (0, 0, 0, 0)
    db = DatabaseStub()

try:
    # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
    from vision_api_simple import vision_api
    logger.info("‚úÖ Vision API –∑–∞–≥—Ä—É–∂–µ–Ω (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Vision API: {e}")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    class VisionAPIStub:
        def analyze_image(self, image_content):
            return {
                'success': False,
                'error': 'Vision API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
                'detected_items': [],
                'total_detected': 0
            }
    vision_api = VisionAPIStub()

try:
    from food_api import food_api
    logger.info("‚úÖ Food API –∑–∞–≥—Ä—É–∂–µ–Ω")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Food API: {e}")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    class FoodAPIStub:
        def get_food_info(self, food_name, quantity=100):
            return {
                'name': food_name,
                'calories': 100,
                'protein': 5,
                'fat': 3,
                'carbs': 15,
                'quantity': quantity,
                'source': 'stub'
            }
    food_api = FoodAPIStub()

logger.info("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞ (—Å–æ—Å—Ç–æ—è–Ω–∏—è, –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –∫–æ–º–∞–Ω–¥—ã)...
# [–ö–û–ù–í–ï–†–°–ê–¶–ò–ò, –ö–õ–ê–í–ò–ê–¢–£–†–´, –ö–û–ú–ê–ù–î–´ –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
CHOOSING_ROLE, TRAINEE_SETUP, AWAITING_PHOTO, CONFIRM_FOOD, MANUAL_INPUT, LINK_TRAINER = range(6)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_role_keyboard():
    return ReplyKeyboardMarkup([['üë®‚Äçüéì –£—á–µ–Ω–∏–∫', 'üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä']], one_time_keyboard=True, resize_keyboard=True)

def get_goal_keyboard():
    return ReplyKeyboardMarkup([['üìâ –ü–æ—Ö—É–¥–µ–Ω–∏–µ', 'üìà –ù–∞–±–æ—Ä –º–∞—Å—Å—ã', '‚öñÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ']], one_time_keyboard=True, resize_keyboard=True)

def get_gender_keyboard():
    return ReplyKeyboardMarkup([['üë® –ú—É–∂—Å–∫–æ–π', 'üë© –ñ–µ–Ω—Å–∫–∏–π']], one_time_keyboard=True, resize_keyboard=True)

def get_confirm_keyboard():
    return ReplyKeyboardMarkup([['‚úÖ –î–∞, –≤–µ—Ä–Ω–æ', '‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é']], one_time_keyboard=True, resize_keyboard=True)

def get_meal_keyboard():
    return ReplyKeyboardMarkup([['üç≥ –ó–∞–≤—Ç—Ä–∞–∫', 'üç≤ –û–±–µ–¥', 'üçΩÔ∏è –£–∂–∏–Ω', 'üçé –ü–µ—Ä–µ–∫—É—Å']], one_time_keyboard=True, resize_keyboard=True)

def get_main_keyboard(role):
    if role == 'trainee':
        return ReplyKeyboardMarkup([
            ['üì∑ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ', 'üìù –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç'],
            ['üìä –ò—Ç–æ–≥–∏ –¥–Ω—è', 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üîó –¢—Ä–µ–Ω–µ—Ä']
        ], resize_keyboard=True)
    else:
        return ReplyKeyboardMarkup([
            ['üë• –ú–æ–∏ —É—á–µ–Ω–∏–∫–∏', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
            ['üë§ –ü—Ä–æ—Ñ–∏–ª—å']
        ], resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    existing_user = db.get_user(user.id)
    
    if existing_user:
        role = existing_user[3]
        await update.message.reply_text(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}!",
            reply_markup=get_main_keyboard(role)
        )
        return ConversationHandler.END
    
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
        "–Ø FithubBot - —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–∏—Ç–∞–Ω–∏—é!\n\n"
        "–Ø –º–æ–≥—É:\n‚Ä¢ üì∑ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ–¥—É –ø–æ —Ñ–æ—Ç–æ\n‚Ä¢ üìä –°—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£\n"
        "‚Ä¢ üéØ –î–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n‚Ä¢ üë®‚Äçüè´ –°–≤—è–∑—ã–≤–∞—Ç—å —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º\n\n"
        "–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ä–æ–ª—å:",
        reply_markup=get_role_keyboard()
    )
    return CHOOSING_ROLE

async def handle_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user = update.effective_user
    
    if '–£—á–µ–Ω–∏–∫' in text:
        context.user_data.update({
            'user_id': user.id,
            'username': user.username,
            'first_name': user.first_name,
            'role': 'trainee'
        })
        
        await update.message.reply_text(
            "üéì –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.\n–í–≤–µ–¥–∏ —Å–≤–æ–π —Ä–æ—Å—Ç (–≤ —Å–º):",
            reply_markup=ReplyKeyboardRemove()
        )
        return TRAINEE_SETUP
    
    elif '–¢—Ä–µ–Ω–µ—Ä' in text:
        db.add_user((
            user.id, user.username, user.first_name, 'trainer',
            None, None, None, None, None, 1.375, None, None, None, None, None
        ))
        
        await update.message.reply_text(
            f"üë®‚Äçüè´ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ç—Ä–µ–Ω–µ—Ä!\n\n"
            f"–í–∞—à ID: <code>{user.id}</code>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç ID —É—á–µ–Ω–∏–∫–∞–º –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.",
            parse_mode='HTML',
            reply_markup=get_main_keyboard('trainer')
        )
        return ConversationHandler.END

async def setup_trainee(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_data = context.user_data
    
    steps = ['height', 'weight', 'age', 'gender', 'goal']
    current_step = None
    
    for step in steps:
        if step not in user_data:
            current_step = step
            break
    
    if not current_step:
        return await finish_setup(update, context)
    
    try:
        if current_step == 'height':
            height = float(text)
            if 50 <= height <= 250:
                user_data['height'] = height
                await update.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–µ—Å (–∫–≥):")
            else:
                await update.message.reply_text("–í–≤–µ–¥–∏ —Ä–µ–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç (50-250 —Å–º):")
        
        elif current_step == 'weight':
            weight = float(text)
            if 20 <= weight <= 300:
                user_data['weight'] = weight
                await update.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")
            else:
                await update.message.reply_text("–í–≤–µ–¥–∏ —Ä–µ–∞–ª—å–Ω—ã–π –≤–µ—Å (20-300 –∫–≥):")
        
        elif current_step == 'age':
            age = int(text)
            if 10 <= age <= 100:
                user_data['age'] = age
                await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø–æ–ª:", reply_markup=get_gender_keyboard())
            else:
                await update.message.reply_text("–í–≤–µ–¥–∏ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (10-100 –ª–µ—Ç):")
        
        elif current_step == 'gender':
            if '–ú—É–∂—Å–∫–æ–π' in text:
                user_data['gender'] = 'male'
            elif '–ñ–µ–Ω—Å–∫–∏–π' in text:
                user_data['gender'] = 'female'
            else:
                await update.message.reply_text("–í—ã–±–µ—Ä–∏ –ø–æ–ª –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
                return TRAINEE_SETUP
            
            await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ü–µ–ª—å:", reply_markup=get_goal_keyboard())
        
        elif current_step == 'goal':
            goal_map = {'–ü–æ—Ö—É–¥–µ–Ω–∏–µ': 'lose', '–ù–∞–±–æ—Ä –º–∞—Å—Å—ã': 'gain', '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ': 'maintain'}
            user_data['goal'] = goal_map.get(text, 'maintain')
            return await finish_setup(update, context)
    
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ:")
    
    return TRAINEE_SETUP

async def finish_setup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = context.user_data
    
    # –†–∞—Å—Å—á–µ—Ç –Ω–æ—Ä–º –ö–ë–ñ–£
    if user_data['gender'] == 'male':
        bmr = 10 * user_data['weight'] + 6.25 * user_data['height'] - 5 * user_data['age'] + 5
    else:
        bmr = 10 * user_data['weight'] + 6.25 * user_data['height'] - 5 * user_data['age'] - 161
    
    activity = 1.375
    maintenance = bmr * activity
    
    if user_data['goal'] == 'lose':
        calories = maintenance * 0.85
    elif user_data['goal'] == 'gain':
        calories = maintenance * 1.15
    else:
        calories = maintenance
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.add_user((
        user_data['user_id'], user_data['username'], user_data['first_name'], 'trainee',
        user_data['height'], user_data['weight'], user_data['age'], user_data['gender'],
        user_data['goal'], activity, calories, 
        (calories * 0.3 / 4), (calories * 0.25 / 9), (calories * 0.45 / 4), None
    ))
    
    await update.message.reply_text(
        f"üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üìä –¢–≤–æ–∏ –¥–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã:\n"
        f"‚Ä¢ üî• {calories:.0f} –∫–∫–∞–ª\n"
        f"‚Ä¢ üí™ {(calories * 0.3 / 4):.1f} –≥ –±–µ–ª–∫–∞\n"
        f"‚Ä¢ ü•ë {(calories * 0.25 / 9):.1f} –≥ –∂–∏—Ä–æ–≤\n"
        f"‚Ä¢ üçö {(calories * 0.45 / 4):.1f} –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤\n\n"
        "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ!",
        reply_markup=get_main_keyboard('trainee')
    )
    return ConversationHandler.END

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = db.get_user(user_id)
    
    if not user or user[3] != 'trainee':
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start")
        return
    
    await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
    photo_file = await update.message.photo[-1].get_file()
    photo_bytes = await photo_file.download_as_bytearray()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ Vision API
    analysis_result = vision_api.analyze_image(photo_bytes)
    
    if 'error' in analysis_result:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –ª—É—á—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏.",
            reply_markup=get_main_keyboard('trainee')
        )
        return
    
    detected_items = analysis_result.get('detected_items', [])
    
    if not detected_items:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –µ–¥—É –Ω–∞ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–Ω–∏–º–æ–∫.",
            reply_markup=get_main_keyboard('trainee')
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    context.user_data['detected_items'] = detected_items
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    message = "üì∑ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n\n"
    for i, item in enumerate(detected_items[:5], 1):
        message += f"{i}. {item['name'].title()} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {item['confidence']:.0%})\n"
    
    message += "\n–í–µ—Ä–Ω–æ –ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã –ø—Ä–æ–¥—É–∫—Ç—ã?"
    
    await update.message.reply_text(message, reply_markup=get_confirm_keyboard())
    return CONFIRM_FOOD

async def handle_food_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    detected_items = context.user_data.get('detected_items', [])
    
    if '–î–∞, –≤–µ—Ä–Ω–æ' in text:
        if not detected_items:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã")
            return ConversationHandler.END
        
        main_product = detected_items[0]
        context.user_data['current_food'] = main_product['name']
        
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø–æ—Ä—Ü–∏–∏ '{main_product['name']}' –≤ –≥—Ä–∞–º–º–∞—Ö:",
            reply_markup=ReplyKeyboardRemove()
        )
        return MANUAL_INPUT
    
    elif '–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é' in text:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:", reply_markup=ReplyKeyboardRemove())
        return MANUAL_INPUT

async def handle_manual_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id
    
    if 'current_food' not in context.user_data:
        context.user_data['current_food'] = text
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø–æ—Ä—Ü–∏–∏ –≤ –≥—Ä–∞–º–º–∞—Ö:")
        return MANUAL_INPUT
    
    try:
        quantity = float(text)
        food_name = context.user_data['current_food']
        
        food_info = food_api.get_food_info(food_name, quantity)
        context.user_data['food_info'] = food_info
        
        await update.message.reply_text(
            f"üçé {food_info['name']}\n"
            f"‚öñÔ∏è {quantity}–≥\n"
            f"üî• {food_info['calories']:.0f} –∫–∫–∞–ª\n"
            f"üí™ {food_info['protein']:.1f}–≥ –±–µ–ª–∫–∞\n"
            f"ü•ë {food_info['fat']:.1f}–≥ –∂–∏—Ä–æ–≤\n"
            f"üçö {food_info['carbs']:.1f}–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤\n\n"
            "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏:",
            reply_markup=get_meal_keyboard()
        )
        return AWAITING_PHOTO
    
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –≤–µ—Å–∞:")

async def handle_meal_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id
    food_info = context.user_data.get('food_info')
    
    if not food_info:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return ConversationHandler.END
    
    meal_map = {'üç≥ –ó–∞–≤—Ç—Ä–∞–∫': 'breakfast', 'üç≤ –û–±–µ–¥': 'lunch', 'üçΩÔ∏è –£–∂–∏–Ω': 'dinner', 'üçé –ü–µ—Ä–µ–∫—É—Å': 'snack'}
    meal_type = meal_map.get(text, 'other')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    db.add_food_entry(
        user_id,
        food_info['name'],
        food_info['quantity'],
        food_info['calories'],
        food_info['protein'],
        food_info['fat'],
        food_info['carbs'],
        meal_type
    )
    
    await update.message.reply_text(
        f"‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ {text.lower()}!\n"
        f"üìä –î–æ–±–∞–≤–ª–µ–Ω–æ: {food_info['calories']:.0f} –∫–∫–∞–ª",
        reply_markup=get_main_keyboard('trainee')
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç—Ä–µ–Ω–µ—Ä–∞
    user = db.get_user(user_id)
    if user and user[14]:
        try:
            trainer_id = user[14]
            await context.bot.send_message(
                trainer_id,
                f"üìä –£—á–µ–Ω–∏–∫ {user[2]} –¥–æ–±–∞–≤–∏–ª –∑–∞–ø–∏—Å—å:\n"
                f"‚Ä¢ {food_info['name']} - {food_info['quantity']}–≥\n"
                f"‚Ä¢ {food_info['calories']:.0f} –∫–∫–∞–ª ({text})"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞: {e}")
    
    return ConversationHandler.END

async def show_summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = db.get_user(user_id)
    
    if not user:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return
    
    calories, protein, fat, carbs = db.get_daily_summary(user_id)
    goal_calories = user[10] or 2000
    
    percentage = (calories / goal_calories * 100) if goal_calories > 0 else 0
    
    message = (
        f"üìä –ò—Ç–æ–≥–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
        f"üî• –ö–∞–ª–æ—Ä–∏–∏: {calories:.0f} / {goal_calories:.0f} ({percentage:.1f}%)\n"
        f"üí™ –ë–µ–ª–∫–∏: {protein:.1f}–≥\n"
        f"ü•ë –ñ–∏—Ä—ã: {fat:.1f}–≥\n"
        f"üçö –£–≥–ª–µ–≤–æ–¥—ã: {carbs:.1f}–≥\n\n"
    )
    
    if percentage >= 100:
        message += "üéØ –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞! üéâ"
    elif percentage >= 80:
        message += "üí™ –û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å!"
    else:
        message += "üìà –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
    
    await update.message.reply_text(message)

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = db.get_user(user_id)
    
    if not user:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return
    
    role = user[3]
    
    if role == 'trainee':
        message = (
            f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"üìè –†–æ—Å—Ç: {user[4]} —Å–º\n"
            f"‚öñÔ∏è –í–µ—Å: {user[5]} –∫–≥\n"
            f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user[6]} –ª–µ—Ç\n"
            f"üë´ –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if user[7] == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'}\n"
            f"üéØ –¶–µ–ª—å: {get_goal_text(user[8])}\n"
            f"üî• –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞: {user[10]:.0f} –∫–∫–∞–ª\n"
        )
        
        trainer = None  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∏—Å–∫ —Ç—Ä–µ–Ω–µ—Ä–∞
        if trainer:
            message += f"\nüë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä: {trainer[2]}"
        else:
            message += "\nüîó –¢—Ä–µ–Ω–µ—Ä –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω"
            
    else:
        message = (
            f"üë®‚Äçüè´ <b>–ü—Ä–æ—Ñ–∏–ª—å —Ç—Ä–µ–Ω–µ—Ä–∞</b>\n\n"
            f"üÜî –í–∞—à ID: <code>{user[0]}</code>\n"
        )
        
        trainees = db.get_trainees(user[0])
        if trainees:
            message += f"\nüë• –£—á–µ–Ω–∏–∫–∏ ({len(trainees)}):\n"
            for trainee in trainees:
                message += f"‚Ä¢ {trainee[2]}\n"
        else:
            message += "\nüë• –£—á–µ–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"
    
    await update.message.reply_text(message, parse_mode='HTML')

def get_goal_text(goal):
    goals = {'lose': '–ü–æ—Ö—É–¥–µ–Ω–∏–µ', 'gain': '–ù–∞–±–æ—Ä –º–∞—Å—Å—ã', 'maintain': '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ'}
    return goals.get(goal, '–ù–µ —É–∫–∞–∑–∞–Ω–∞')

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.', reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    if TELEGRAM_BOT_TOKEN == "demo_mode":
        logger.error("‚ùå –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –±–µ–∑ TELEGRAM_BOT_TOKEN")
        logger.info("üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:")
        logger.info("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Railway Dashboard")
        logger.info("2. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∫–ª–∞–¥–∫—É Variables")
        logger.info("3. –î–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN = –≤–∞—à_—Ç–æ–∫–µ–Ω")
        logger.info("4. Railway –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç –±–æ—Ç–∞")
        return
    
    try:
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', start)],
            states={
                CHOOSING_ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_role)],
                TRAINEE_SETUP: [MessageHandler(filters.TEXT & ~filters.COMMAND, setup_trainee)],
                CONFIRM_FOOD: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_food_confirmation)],
                MANUAL_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_manual_input)],
                AWAITING_PHOTO: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_meal_type)],
            },
            fallbacks=[CommandHandler('cancel', cancel)],
        )
        
        application.add_handler(conv_handler)
        application.add_handler(CommandHandler('summary', show_summary))
        application.add_handler(CommandHandler('profile', show_profile))
        application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
        
        logger.info("‚úÖ –ë–æ—Ç —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º...")
        application.run_polling()
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        logger.info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TELEGRAM_BOT_TOKEN –≤ Railway Variables")

if __name__ == '__main__':
    main()
