import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackContext
from config import Config
from database import db
from vision_api import VisionAPI
from kbju_calculator import KBJUCalculator
from user_manager import UserManager
from keyboards import *
import io
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class FithubBot:
    def __init__(self):
        self.db = db
        self.vision = VisionAPI()
        self.calculator = KBJUCalculator()
        self.user_manager = UserManager()
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        user_data = {
            'id': user.id,
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name
        }
        
        await update.message.reply_html(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FITHUB!\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å",
            reply_markup=get_user_type_keyboard()
        )
        
        self.user_manager.set_user_state(user.id, 'awaiting_user_type')

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        message_text = update.message.text
        state = self.user_manager.get_user_state(user_id)
        
        if state == 'awaiting_user_type':
            await self.handle_user_type(update, context)
        elif state == 'awaiting_height':
            await self.handle_height(update, context)
        elif state == 'awaiting_weight':
            await self.handle_weight(update, context)
        elif state == 'awaiting_trainer_id':
            await self.handle_trainer_id(update, context)
        elif state == 'awaiting_manual_weight':
            await self.handle_manual_weight(update, context)
        elif state == 'awaiting_food_name':
            await self.handle_food_name(update, context)

    async def handle_user_type(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        message_text = update.message.text
        
        if '—Ç—Ä–µ–Ω–µ—Ä' in message_text.lower():
            user_type = 'trainer'
            self.db.add_user({
                'id': user_id,
                'username': update.effective_user.username,
                'first_name': update.effective_user.first_name,
                'last_name': update.effective_user.last_name,
                'user_type': user_type
            })
            
            await update.message.reply_text(
                "–û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ç—Ä–µ–Ω–µ—Ä. üèãÔ∏è\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å —É—á–µ–Ω–∏–∫–æ–≤\n"
                "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏—Ö —Ä–∞—Ü–∏–æ–Ω\n"
                "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å –æ—Ç—á–µ—Ç—ã –æ –ø–∏—Ç–∞–Ω–∏–∏\n\n"
                "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º —Å–≤–æ–π ID:",
                reply_markup=remove_keyboard()
            )
            
        elif '—É—á–µ–Ω–∏–∫' in message_text.lower():
            user_type = 'trainee'
            self.db.add_user({
                'id': user_id,
                'username': update.effective_user.username,
                'first_name': update.effective_user.first_name,
                'last_name': update.effective_user.last_name,
                'user_type': user_type
            })
            
            await update.message.reply_text(
                "–û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —É—á–µ–Ω–∏–∫. üßë‚Äçüéì\n\n"
                "–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–∞—à–µ–π –Ω–æ—Ä–º—ã –ö–ë–ñ–£ –º–Ω–µ –Ω—É–∂–Ω—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–º:",
                reply_markup=remove_keyboard()
            )
            self.user_manager.set_user_state(user_id, 'awaiting_height')
            
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:",
                reply_markup=get_user_type_keyboard()
            )

    async def handle_height(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        try:
            height = float(update.message.text)
            if height < 100 or height > 250:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (100-250 —Å–º):")
                return
                
            self.user_manager.set_user_state(user_id, 'awaiting_weight', {'height': height})
            await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–≥:")
            
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

    async def handle_weight(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        try:
            weight = float(update.message.text)
            if weight < 30 or weight > 300:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (30-300 –∫–≥):")
                return
                
            user_data = self.user_manager.get_user_data(user_id)
            height = user_data['height']
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ö–ë–ñ–£ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            kbju = self.calculator.calculate_daily_kbju(
                weight=weight, 
                height=height, 
                age=25,  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤–æ–∑—Ä–∞—Å—Ç–∞
                gender='male',  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª–∞
                goal='maintenance'
            )
            
            self.db.update_user_metrics(user_id, height, weight, kbju['calories'])
            
            response = (
                "üìä –í–∞—à–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –ö–ë–ñ–£:\n\n"
                f"‚Ä¢ üçΩÔ∏è –ö–∞–ª–æ—Ä–∏–∏: {kbju['calories']} –∫–∫–∞–ª\n"
                f"‚Ä¢ ü•© –ë–µ–ª–∫–∏: {kbju['protein']} –≥\n"
                f"‚Ä¢ ü•ë –ñ–∏—Ä—ã: {kbju['fat']} –≥\n"
                f"‚Ä¢ üçö –£–≥–ª–µ–≤–æ–¥—ã: {kbju['carbs']} –≥\n\n"
                f"–ù–∞ –æ–¥–∏–Ω –ø—Ä–∏–µ–º –ø–∏—â–∏ (~3 –ø—Ä–∏–µ–º–∞):\n"
                f"‚Ä¢ üçΩÔ∏è –ö–∞–ª–æ—Ä–∏–∏: {kbju['per_meal']['calories']} –∫–∫–∞–ª\n"
                f"‚Ä¢ ü•© –ë–µ–ª–∫–∏: {kbju['per_meal']['protein']} –≥\n"
                f"‚Ä¢ ü•ë –ñ–∏—Ä—ã: {kbju['per_meal']['fat']} –≥\n"
                f"‚Ä¢ üçö –£–≥–ª–µ–≤–æ–¥—ã: {kbju['per_meal']['carbs']} –≥\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ –µ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞! üì∏"
            )
            
            await update.message.reply_text(response)
            self.user_manager.set_user_state(user_id, 'ready')
            
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        
        photo_file = await update.message.photo[-1].get_file()
        photo_bytes = await photo_file.download_as_bytearray()
        
        await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ...")
        
        # –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Vision API
        analysis_result = self.vision.detect_food_items(bytes(photo_bytes))
        
        if not analysis_result['food_items']:
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ —Ñ–æ—Ç–æ. üòï\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –≤—Ä—É—á–Ω—É—é:"
            )
            self.user_manager.set_user_state(user_id, 'awaiting_food_name')
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        self.user_manager.set_user_state(user_id, 'awaiting_confirmation', {
            'analysis_result': analysis_result,
            'photo_bytes': photo_bytes
        })
        
        response = "üì∏ –ù–∞ —Ñ–æ—Ç–æ —è –æ–ø—Ä–µ–¥–µ–ª–∏–ª:\n\n"
        total_calories = 0
        
        for item in analysis_result['food_items']:
            weight = analysis_result['estimated_weights'].get(item['name'].lower(), 100)
            kbju = self.calculator.calculate_food_kbju(item['name'], weight)
            
            response += (
                f"‚Ä¢ {item['name'].title()} (~{weight}–≥):\n"
                f"  üçΩÔ∏è {kbju['calories']} –∫–∫–∞–ª | "
                f"ü•© {kbju['protein']}–≥ | "
                f"ü•ë {kbju['fat']}–≥ | "
                f"üçö {kbju['carbs']}–≥\n"
            )
            total_calories += kbju['calories']
        
        response += f"\nüìä –ò—Ç–æ–≥–æ: {total_calories} –∫–∫–∞–ª\n\n–í—Å–µ –≤–µ—Ä–Ω–æ?"
        
        await update.message.reply_text(response, reply_markup=get_confirm_keyboard())

    async def handle_manual_weight(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user_data = self.user_manager.get_user_data(user_id)
        
        try:
            weight = float(update.message.text)
            food_name = user_data['food_name']
            
            kbju = self.calculator.calculate_food_kbju(food_name, weight)
            
            response = (
                f"üìä –ö–ë–ñ–£ –¥–ª—è {food_name} ({weight}–≥):\n\n"
                f"‚Ä¢ üçΩÔ∏è –ö–∞–ª–æ—Ä–∏–∏: {kbju['calories']} –∫–∫–∞–ª\n"
                f"‚Ä¢ ü•© –ë–µ–ª–∫–∏: {kbju['protein']} –≥\n"
                f"‚Ä¢ ü•ë –ñ–∏—Ä—ã: {kbju['fat']} –≥\n"
                f"‚Ä¢ üçö –£–≥–ª–µ–≤–æ–¥—ã: {kbju['carbs']} –≥\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏:"
            )
            
            self.user_manager.set_user_state(user_id, 'awaiting_meal_type', {
                'food_name': food_name,
                'weight': weight,
                'kbju': kbju
            })
            
            await update.message.reply_text(response, reply_markup=get_meal_type_keyboard())
            
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

    async def handle_food_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        food_name = update.message.text
        
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –≤–µ—Å {food_name} –≤ –≥—Ä–∞–º–º–∞—Ö:",
            reply_markup=remove_keyboard()
        )
        
        self.user_manager.set_user_state(user_id, 'awaiting_manual_weight', {
            'food_name': food_name
        })

    async def handle_trainer_id(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        try:
            trainer_id = int(update.message.text)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å —Ç—Ä–µ–Ω–µ—Ä-—É—á–µ–Ω–∏–∫
            self.db.add_trainer_trainee(trainer_id, user_id)
            
            await update.message.reply_text(
                "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Ç—Ä–µ–Ω–µ—Ä—É!\n\n"
                "–¢–µ–ø–µ—Ä—å —Ç—Ä–µ–Ω–µ—Ä –±—É–¥–µ—Ç –≤–∏–¥–µ—Ç—å –≤–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∏—Ç–∞–Ω–∏—è.",
                reply_markup=remove_keyboard()
            )
            
            self.user_manager.set_user_state(user_id, 'ready')
            
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç—Ä–µ–Ω–µ—Ä–∞:")

    async def daily_summary(self, context: ContextTypes.DEFAULT_TYPE):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
        # —Ç—Ä–µ–Ω–µ—Ä–∞–º –∏ —É—á–µ–Ω–∏–∫–∞–º
        pass

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        application = Application.builder().token(Config.BOT_TOKEN).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling()

if __name__ == '__main__':
    bot = FithubBot()
    bot.run()
