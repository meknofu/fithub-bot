import os
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
CHOOSING_ROLE, TRAINEE_SETUP = range(2)

def get_role_keyboard():
    return ReplyKeyboardMarkup([['üë®‚Äçüéì –£—á–µ–Ω–∏–∫', 'üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä']], 
                              resize_keyboard=True, one_time_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –î–û–õ–ñ–ù–ê –†–ê–ë–û–¢–ê–¢–¨"""
    user = update.effective_user
    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    
    await update.message.reply_text(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FITHUB!\n\n"
        "–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ä–æ–ª—å:",
        reply_markup=get_role_keyboard()
    )
    return CHOOSING_ROLE

async def handle_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    text = update.message.text
    user = update.effective_user
    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤—ã–±—Ä–∞–ª: {text}")
    
    if '–£—á–µ–Ω–∏–∫' in text:
        await update.message.reply_text(
            "üéì –û—Ç–ª–∏—á–Ω–æ! –¢—ã - —É—á–µ–Ω–∏–∫!\n"
            "–í–≤–µ–¥–∏ —Å–≤–æ–π —Ä–æ—Å—Ç (–≤ —Å–º):",
            reply_markup=None
        )
        return TRAINEE_SETUP
    
    elif '–¢—Ä–µ–Ω–µ—Ä' in text:
        await update.message.reply_text(
            f"üë®‚Äçüè´ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Ç—Ä–µ–Ω–µ—Ä!\n"
            f"–í–∞—à ID: <code>{user.id}</code>",
            parse_mode='HTML'
        )
        return ConversationHandler.END

async def handle_trainee_setup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ä–æ—Å—Ç–∞"""
    text = update.message.text
    user = update.effective_user
    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤–≤–µ–ª —Ä–æ—Å—Ç: {text}")
    
    try:
        height = float(text)
        await update.message.reply_text(
            f"üìè –†–æ—Å—Ç: {height} —Å–º\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –≤–µ—Å (–≤ –∫–≥):"
        )
        return TRAINEE_SETUP
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —Ä–æ—Å—Ç–∞:")
        return TRAINEE_SETUP

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"‚ùå –û—à–∏–±–∫–∞: {context.error}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –ü–†–û–°–¢–ê–Ø –ò –†–ê–ë–û–ß–ê–Ø"""
    TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not TELEGRAM_BOT_TOKEN:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    logger.info("üöÄ –°–æ–∑–¥–∞–µ–º Application...")
    
    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOOSING_ROLE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_role)
            ],
            TRAINEE_SETUP: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_trainee_setup)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)
    
    logger.info("‚úÖ –ë–æ—Ç —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling(
        drop_pending_updates=True,
        allowed_updates=['message', 'callback_query']
    )

if __name__ == '__main__':
    main()
