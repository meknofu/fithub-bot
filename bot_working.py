import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import sqlite3
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
CHOOSING_ROLE, ENTERING_HEIGHT, ENTERING_WEIGHT, ENTERING_AGE, CONFIRMING_DATA = range(5)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
role_keyboard = [['üë®‚Äçüéì –£—á–µ–Ω–∏–∫', 'üë®‚Äçüè´ –£—á–∏—Ç–µ–ª—å']]
role_markup = ReplyKeyboardMarkup(role_keyboard, one_time_keyboard=True, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ —Ä–æ–ª–∏."""
    user = update.message.from_user
    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.\n\n"
        "ü§î –ö—Ç–æ –≤—ã?",
        reply_markup=role_markup
    )
    return CHOOSING_ROLE

async def role_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±–æ—Ä —Ä–æ–ª–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–æ—Å—Ç."""
    user = update.message.from_user
    role = update.message.text
    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤—ã–±—Ä–∞–ª: {role}")
    
    context.user_data['role'] = role
    
    await update.message.reply_text(
        "üìè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:",
        reply_markup=ReplyKeyboardRemove()
    )
    return ENTERING_HEIGHT

async def height_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–æ—Å—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–µ—Å."""
    user = update.message.from_user
    height_text = update.message.text
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–æ—Å—Ç–∞
    try:
        height = int(height_text)
        if height < 50 or height > 250:
            await update.message.reply_text("‚ùå –†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 50 –¥–æ 250 —Å–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç:")
            return ENTERING_HEIGHT
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175):")
        return ENTERING_HEIGHT
    
    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤–≤–µ–ª —Ä–æ—Å—Ç: {height}")
    context.user_data['height'] = height
    
    await update.message.reply_text("‚öñÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:")
    return ENTERING_WEIGHT

async def weight_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–µ—Å –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç."""
    user = update.message.from_user
    weight_text = update.message.text
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–µ—Å–∞
    try:
        weight = float(weight_text)
        if weight < 10 or weight > 300:
            await update.message.reply_text("‚ùå –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 10 –¥–æ 300 –∫–≥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å:")
            return ENTERING_WEIGHT
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 65.5):")
        return ENTERING_WEIGHT
    
    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤–≤–µ–ª –≤–µ—Å: {weight}")
    context.user_data['weight'] = weight
    
    await update.message.reply_text("üéÇ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    return ENTERING_AGE

async def age_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É."""
    user = update.message.from_user
    age_text = update.message.text
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞
    try:
        age = int(age_text)
        if age < 1 or age > 120:
            await update.message.reply_text("‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 120 –ª–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç:")
            return ENTERING_AGE
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25):")
        return ENTERING_AGE
    
    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤–≤–µ–ª –≤–æ–∑—Ä–∞—Å—Ç: {age}")
    context.user_data['age'] = age
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –¥–∞–Ω–Ω—ã—Ö
    role = context.user_data.get('role', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    height = context.user_data.get('height', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    weight = context.user_data.get('weight', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    
    summary = (
        "üìä **–°–≤–æ–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö:**\n\n"
        f"üë§ **–†–æ–ª—å:** {role}\n"
        f"üìè **–†–æ—Å—Ç:** {height} —Å–º\n"
        f"‚öñÔ∏è **–í–µ—Å:** {weight} –∫–≥\n"
        f"üéÇ **–í–æ–∑—Ä–∞—Å—Ç:** {age} –ª–µ—Ç\n\n"
        "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã?"
    )
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_keyboard = [['‚úÖ –î–∞', '‚ùå –ù–µ—Ç']]
    confirm_markup = ReplyKeyboardMarkup(confirm_keyboard, one_time_keyboard=True, resize_keyboard=True)
    
    await update.message.reply_text(summary, reply_markup=confirm_markup, parse_mode='Markdown')
    return CONFIRMING_DATA

async def data_confirmed(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä."""
    user = update.message.from_user
    confirmation = update.message.text
    
    if confirmation == '‚úÖ –î–∞':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
        save_user_data(user.id, context.user_data)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ò–ú–¢
        height = context.user_data.get('height')
        weight = context.user_data.get('weight')
        
        if height and weight:
            height_m = height / 100
            bmi = weight / (height_m * height_m)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ò–ú–¢
            if bmi < 18.5:
                category = "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –≤–µ—Å"
            elif bmi < 25:
                category = "–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–µ—Å"
            elif bmi < 30:
                category = "–∏–∑–±—ã—Ç–æ—á–Ω—ã–π –≤–µ—Å"
            else:
                category = "–æ–∂–∏—Ä–µ–Ω–∏–µ"
            
            response = (
                "üéâ **–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!**\n\n"
                f"üìä **–í–∞—à –ò–ú–¢:** {bmi:.1f}\n"
                f"üìà **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {category}\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞! üëã"
            )
        else:
            response = "üéâ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞! üëã"
        
        await update.message.reply_text(response, reply_markup=ReplyKeyboardRemove(), parse_mode='Markdown')
        
    else:
        await update.message.reply_text(
            "üîÑ –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
            reply_markup=role_markup
        )
        return CHOOSING_ROLE
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä."""
    user = update.message.from_user
    logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—Ç–º–µ–Ω–∏–ª —Ä–∞–∑–≥–æ–≤–æ—Ä.")
    await update.message.reply_text(
        "üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start",
        reply_markup=ReplyKeyboardRemove()
    )
    context.user_data.clear()
    return ConversationHandler.END

def save_user_data(user_id, user_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
    try:
        conn = sqlite3.connect('users.db')
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                role TEXT,
                height INTEGER,
                weight REAL,
                age INTEGER,
                data TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        cursor.execute('''
            INSERT OR REPLACE INTO users (user_id, role, height, weight, age, data)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (
            user_id,
            user_data.get('role'),
            user_data.get('height'),
            user_data.get('weight'),
            user_data.get('age'),
            json.dumps(user_data)
        ))
        
        conn.commit()
        conn.close()
        logger.info(f"üíæ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–µ–º Application
    application = Application.builder().token("8178401200:AAEh5oeYRhgBJ8UrF1s2rlZtF0SuI1hPOAM").build()

    # –°–æ–∑–¥–∞–µ–º ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            CHOOSING_ROLE: [
                MessageHandler(filters.Regex('^(üë®‚Äçüéì –£—á–µ–Ω–∏–∫|üë®‚Äçüè´ –£—á–∏—Ç–µ–ª—å)$'), role_choice)
            ],
            ENTERING_HEIGHT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, height_received)
            ],
            ENTERING_WEIGHT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, weight_received)
            ],
            ENTERING_AGE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, age_received)
            ],
            CONFIRMING_DATA: [
                MessageHandler(filters.Regex('^(‚úÖ –î–∞|‚ùå –ù–µ—Ç)$'), data_confirmed)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

if __name__ == '__main__':
    main()
