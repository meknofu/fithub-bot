
from database import db
from kbju_calculator import KBJUCalculator
import logging
from datetime import datetime, timedelta
import asyncio

logger = logging.getLogger(__name__)

class UserManager:
    def __init__(self):
        self.db = db
        self.calculator = KBJUCalculator()
        self.user_states = {}

    def set_user_state(self, user_id, state, data=None):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_states:
            self.user_states[user_id] = {}
        self.user_states[user_id]['state'] = state
        if data:
            self.user_states[user_id]['data'] = data

    def get_user_state(self, user_id):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.user_states.get(user_id, {}).get('state')

    def get_user_data(self, user_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.user_states.get(user_id, {}).get('data', {})

    async def start_meal_reminders(self, application):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏"""
        while True:
            now = datetime.now()
            
            # –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (—á–∞—Å—ã, –º–∏–Ω—É—Ç—ã, —Å–æ–æ–±—â–µ–Ω–∏–µ)
            reminder_times = [
                (8, 0, "üç≥ *–í—Ä–µ–º—è –∑–∞–≤—Ç—Ä–∞–∫–∞!*\n\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–∑–∞–≤—Ç—Ä–∞–∫–∞—Ç—å –∏ –∑–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –º–µ—Ç–∞–±–æ–ª–∏–∑–º –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è."),
                (13, 0, "üç≤ *–í—Ä–µ–º—è –æ–±–µ–¥–∞!*\n\n–ü–æ—Ä–∞ –ø–æ–¥–∫—Ä–µ–ø–∏—Ç—å—Å—è! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ–±–µ–¥–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é."),
                (19, 0, "üçΩÔ∏è *–í—Ä–µ–º—è —É–∂–∏–Ω–∞!*\n\n–õ–µ–≥–∫–∏–π —É–∂–∏–Ω –∑–∞ 3-4 —á–∞—Å–∞ –¥–æ —Å–Ω–∞ –ø–æ–º–æ–∂–µ—Ç —Ö–æ—Ä–æ—à–æ –≤—ã—Å–ø–∞—Ç—å—Å—è –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ä–º—É."),
                (11, 0, "‚òï *–í—Ä–µ–º—è –ø–µ—Ä–µ–∫—É—Å–∞!*\n\n–ù–µ–±–æ–ª—å—à–æ–π –ø–µ—Ä–µ–∫—É—Å –ø–æ–º–æ–∂–µ—Ç –¥–æ–∂–¥–∞—Ç—å—Å—è –æ–±–µ–¥–∞ –±–µ–∑ —á—É–≤—Å—Ç–≤–∞ –≥–æ–ª–æ–¥–∞."),
                (16, 0, "üçé *–í—Ä–µ–º—è –ø–æ–ª–¥–Ω–∏–∫–∞!*\n\n–í—Ç–æ—Ä–æ–π –ø–µ—Ä–µ–∫—É—Å –ø–æ–¥–¥–µ—Ä–∂–∏—Ç —ç–Ω–µ—Ä–≥–∏—é –¥–æ –≤–µ—á–µ—Ä–∞.")
            ]
            
            for hour, minute, message in reminder_times:
                if now.hour == hour and now.minute == minute:
                    await self._send_reminders_to_all_users(application, message)
                    await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
            
            await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

    async def _send_reminders_to_all_users(self, application, message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã
            # –ü–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫—Ç–æ —Å–µ–≥–æ–¥–Ω—è –∞–∫—Ç–∏–≤–µ–Ω
            active_users = self._get_active_users()
            
            for user_id in active_users:
                try:
                    await application.bot.send_message(
                        chat_id=user_id,
                        text=message,
                        parse_mode='Markdown'
                    )
                    logger.info(f"Reminder sent to user {user_id}")
                except Exception as e:
                    logger.error(f"Failed to send reminder to {user_id}: {e}")
                    
        except Exception as e:
            logger.error(f"Error in reminder system: {e}")

    def _get_active_users(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ
            # –°–µ–π—á–∞—Å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
            return []
        except Exception as e:
            logger.error(f"Error getting active users: {e}")
            return []

    def get_daily_summary(self, user_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Ç–æ–≥ —Ä–∞—Ü–∏–æ–Ω–∞ –∑–∞ –¥–µ–Ω—å"""
        today = datetime.now().strftime('%Y-%m-%d')
        meals = self.db.get_daily_intake(user_id, today)
        
        total_calories = 0
        total_protein = 0
        total_fat = 0
        total_carbs = 0
        
        for meal in meals:
            total_calories += meal['calories']
            total_protein += meal['protein']
            total_fat += meal['fat']
            total_carbs += meal['carbs']
        
        return {
            'date': today,
            'meals': meals,
            'total_calories': total_calories,
            'total_protein': total_protein,
            'total_fat': total_fat,
            'total_carbs': total_carbs
        }
