import datetime
import logging
from telegram.ext import ContextTypes
from database import db

logger = logging.getLogger(__name__)

class MealReminder:
    def __init__(self):
        self.meal_times = {
            'breakfast': datetime.time(hour=8, minute=0),   # 8:00
            'lunch': datetime.time(hour=13, minute=0),      # 13:00
            'dinner': datetime.time(hour=19, minute=0),     # 19:00
            'snack': datetime.time(hour=16, minute=0)       # 16:00
        }
    
    async def send_meal_reminder(self, context: ContextTypes.DEFAULT_TYPE, user_id: int, meal_type: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–µ–º–µ –ø–∏—â–∏"""
        try:
            user = db.get_user(user_id)
            if not user:
                return
            
            meal_names = {
                'breakfast': '–∑–∞–≤—Ç—Ä–∞–∫',
                'lunch': '–æ–±–µ–¥', 
                'dinner': '—É–∂–∏–Ω',
                'snack': '–ø–µ—Ä–µ–∫—É—Å'
            }
            
            meal_name = meal_names.get(meal_type, '–ø—Ä–∏–µ–º –ø–∏—â–∏')
            
            message = (
                f"üçΩÔ∏è <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ {meal_name}</b>\n\n"
                f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–º –ø–∏—Ç–∞–Ω–∏–∏!\n"
                f"–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞."
            )
            
            await context.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode='HTML'
            )
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ {meal_type} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
    
    async def send_daily_summary(self, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Ç–æ–≥–æ–≤ –∑–∞ –¥–µ–Ω—å"""
        try:
            user = db.get_user(user_id)
            if not user or user[3] != 'trainee':  # role –≤ 4-–π –∫–æ–ª–æ–Ω–∫–µ
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Ç–æ–≥–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            calories, protein, fat, carbs = db.get_daily_summary(user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            goal_calories = user[10] or 2000  # daily_calories
            goal_protein = user[11] or 150    # protein_goal
            goal_fat = user[12] or 70         # fat_goal  
            goal_carbs = user[13] or 250      # carb_goal
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
            calories_percent = (calories / goal_calories * 100) if goal_calories > 0 else 0
            protein_percent = (protein / goal_protein * 100) if goal_protein > 0 else 0
            fat_percent = (fat / goal_fat * 100) if goal_fat > 0 else 0
            carbs_percent = (carbs / goal_carbs * 100) if goal_carbs > 0 else 0
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã
            def create_progress_bar(percent):
                filled = '‚ñà' * int(percent / 5)  # 20 —Å–∏–º–≤–æ–ª–æ–≤ = 100%
                empty = '‚ñë' * (20 - len(filled))
                return f"{filled}{empty} {percent:.1f}%"
            
            message = (
                f"üìä <b>–ò—Ç–æ–≥–∏ –∑–∞ –¥–µ–Ω—å</b>\n\n"
                f"üî• –ö–∞–ª–æ—Ä–∏–∏: {calories:.0f} / {goal_calories:.0f}\n"
                f"{create_progress_bar(calories_percent)}\n\n"
                f"üí™ –ë–µ–ª–∫–∏: {protein:.1f}–≥ / {goal_protein:.1f}–≥\n"
                f"{create_progress_bar(protein_percent)}\n\n"
                f"ü•ë –ñ–∏—Ä—ã: {fat:.1f}–≥ / {goal_fat:.1f}–≥\n"
                f"{create_progress_bar(fat_percent)}\n\n"
                f"üçö –£–≥–ª–µ–≤–æ–¥—ã: {carbs:.1f}–≥ / {goal_carbs:.1f}–≥\n"
                f"{create_progress_bar(carbs_percent)}\n\n"
            )
            
            if calories_percent >= 100:
                message += "üéØ <b>–î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!</b> –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üéâ"
            elif calories_percent >= 80:
                message += "üí™ <b>–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å!</b> –ü–æ—á—Ç–∏ —É —Ü–µ–ª–∏!"
            else:
                message += "üìà <b>–•–æ—Ä–æ—à–µ–µ –Ω–∞—á–∞–ª–æ!</b> –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
            
            await context.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode='HTML'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç —Ç—Ä–µ–Ω–µ—Ä—É
            trainer_id = user[14]  # trainer_id
            if trainer_id:
                await self.send_trainer_report(context, user_id, trainer_id, calories, protein, fat, carbs)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ç–æ–≥–æ–≤: {e}")
    
    async def send_trainer_report(self, context: ContextTypes.DEFAULT_TYPE, trainee_id: int, 
                                trainer_id: int, calories: float, protein: float, fat: float, carbs: float):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ —Ç—Ä–µ–Ω–µ—Ä—É"""
        try:
            trainee = db.get_user(trainee_id)
            if not trainee:
                return
            
            trainee_name = trainee[2]  # first_name
            
            message = (
                f"üë§ <b>–û—Ç—á–µ—Ç —É—á–µ–Ω–∏–∫–∞: {trainee_name}</b>\n\n"
                f"üìÖ –î–∞—Ç–∞: {datetime.datetime.now().strftime('%d.%m.%Y')}\n\n"
                f"üìä –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å:\n"
                f"‚Ä¢ üî• {calories:.0f} –∫–∫–∞–ª\n"
                f"‚Ä¢ üí™ {protein:.1f}–≥ –±–µ–ª–∫–∞\n"
                f"‚Ä¢ ü•ë {fat:.1f}–≥ –∂–∏—Ä–æ–≤\n"
                f"‚Ä¢ üçö {carbs:.1f}–≥ —É–≥–ª–µ–≤–æ–¥–æ–≤"
            )
            
            await context.bot.send_message(
                chat_id=trainer_id,
                text=message,
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ —Ç—Ä–µ–Ω–µ—Ä—É: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
meal_reminder = MealReminder()
